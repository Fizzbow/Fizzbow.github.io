<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据劫持</title>
      <link href="/2021/12/06/Data-hijacking/"/>
      <url>/2021/12/06/Data-hijacking/</url>
      
        <content type="html"><![CDATA[<ul><li>思考:实现以下条件成立可行的方法<figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = ? <span class="comment">//a要如何赋值，才能使下面的if语句成立</span></span><br><span class="line">if(a == <span class="number">1</span> <span class="meta">&amp;&amp; a == 2 &amp;&amp; a == 3){</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="number">1</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><ol><li>==进行比较，两边数据类型不同时，有不一样的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Equality" title="default 转换规则" target="">转换规则</a><blockquote><p>如果操作数之一是对象，另一个是数字或字符串，会尝试使用对象的valueOf()和toString()方法将对象转换为原始值。</p></blockquote></li><li>当然我们会想到使用toString方法，并且把a赋值为一个对象，但a只有在它的原型链上能够寻找到toSting方法，它本身是没有toString方法的，所以我们可以手动地给它定义一个toString方法<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">    <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span>{</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>okay，现在我们可以着手来实现它了,值得注意的一点是：是<code>a.toString()</code>的返回值跟a==1进行比较 <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> a = {</span><br><span class="line"><span class="attr">i</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span>{</span><br><span class="line">          <span class="keyword">return</span> ++<span class="built_in">this</span>.i; <span class="comment">//++i运算后返回 </span></span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>){</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'条件成立'</span>)</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当然除了上述办法还有其他方法比如：把上述toSting方法改成valueOf，或者<code>var a = [1,2,3]</code> <code>a.toString = a.shift</code>shift方法(删除第一项并返回首位)赋值给toString等等，就不再一一赘述<br>最值得关注的还是：使用<strong>数据劫持</strong>的方法来实现这道奇怪的问题</p></blockquote></li></ol><h1 id=""><a href="#" class="headerlink" title=""></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" title="default Object.defineProperty()" target="">Object.defineProperty()</a></h1><blockquote><p>当我们获取一个值的时候希望它做些什么事情，当这种情况出现我们可以使用数据劫持(defineProperty/Proxy)，<code>Object.defineProperty()</code>方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p></blockquote><ul><li>defineProperty：会监听一个属性值</li><li>get():获取属性值</li><li>set()：设置属性值<br>来看一下如何使用数据劫持实现第一道例题<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>,<span class="string">'a'</span>,{</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> {</span><br><span class="line">        <span class="keyword">return</span> ++i;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>){</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'条件成立'</span>)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li><li>首先，我们先监听了window对象下的a属性，并且获取到了a的属性值i，i做的事情就是自增1</li><li>你可能会问，为什么return的是i而不是a，这是因为如果return的是a会触发GETTER拦截器从而导致形成死循环栈内存溢出</li></ul><h2 id="Object-defineProperty-实际应用"><a href="#Object-defineProperty-实际应用" class="headerlink" title="Object.defineProperty()实际应用"></a>Object.defineProperty()实际应用</h2><blockquote><p>在vue2.0中我们就使用到了<code>Object.defineProperty()</code>方法来实现双向数据绑定的原理，以便我们来实现MVVM，下面先写一个简单的实现源码</p></blockquote><figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    姓名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">"spanName"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">id</span> = <span class="string">"inpName"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> obj = </span></span><span class="xquery">{</span></span><br><span class="line"><span class="xquery">       <span class="built_in"> name</span>:<span class="string">''</span></span></span><br><span class="line"><span class="xquery">    }</span><span class="xml"><span class="javascript">;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));<span class="comment">//深拷贝对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">Object</span>.defineProperty(obj,<span class="string">'name'</span>,</span></span><span class="xquery">{</span></span><br><span class="line"><span class="xquery">            get() {</span></span><br><span class="line"><span class="xquery">                <span class="keyword">return</span> newObj<span class="built_in">.name</span>;</span></span><br><span class="line"><span class="xquery">            }</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            set(val) </span><span class="xquery">{</span></span><br><span class="line"><span class="xquery">                <span class="keyword">if</span>(val === newObj<span class="built_in">.name</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="xquery">                newObj<span class="built_in">.name</span> = val;</span></span><br><span class="line"><span class="xquery">                observer();</span></span><br><span class="line"><span class="xquery">            }</span><span class="xml"><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    })</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params"></span>)</span></span></span><span class="xquery">{</span></span><br><span class="line"><span class="xquery">            //数据更改影响视图</span></span><br><span class="line"><span class="xquery">            spanName.innerHTML = obj<span class="built_in">.name</span>;</span></span><br><span class="line"><span class="xquery">            inpName.<span class="keyword">value</span> = obj<span class="built_in">.name</span>;</span></span><br><span class="line"><span class="xquery">    }</span><span class="xml"><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> </span></span><span class="xquery">{</span></span><br><span class="line"><span class="xquery">            obj<span class="built_in">.name</span> = <span class="string">"修改了数据"</span></span></span><br><span class="line"><span class="xquery">    }</span><span class="xml"><span class="javascript">,<span class="number">1000</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    inpName.oninput = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span></span></span><span class="xquery">{</span></span><br><span class="line"><span class="xquery">            //视图更改影响数据；v-model的操作  </span></span><br><span class="line"><span class="xquery">            obj<span class="built_in">.name</span> = this.<span class="keyword">value</span>;</span></span><br><span class="line"><span class="xquery">    }</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ul><li>get()获取到newObj.name的属性值，设置获得的属性值到set(val)里,每次设置完执行observer()</li><li>当在setTimeout里修改了obj.name的数据时，会触发set()拿到最新值赋值给val，再执行observer，拿到最新的值更新视图</li><li>oninput是改变的事件，当视图改变的时候把当前视图的值赋给name属性，再触发set属性如上</li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" title="default Proxy" target="">Proxy</a></h1><blockquote><p>从性能上来说<code>Object.defineProperty()</code>会有一些缺点：<br>1.它需要对原始数据进行克隆。2. 需要分别给对象中的每一个属性设置监听。<br>所以我们拥有了一个更优解<strong>Proxy</strong>，可以完美解决 <code>Object.defineProperty()</code>带来的缺点<br>Proxy用于vue3.0的双向数据绑定</p></blockquote><ul><li>Proxy监听的是整个对象，不需要单独监听一个属性</li><li>prop是当前对象的属性值<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {};</span><br><span class="line">obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,{</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target,prop</span>)</span> {</span><br><span class="line"><span class="keyword">return</span> target[prop]</span><br><span class="line">},</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">target,prop,value</span>)</span> {</span><br><span class="line">target[prop] = value;</span><br><span class="line">observer();</span><br><span class="line">}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS的深浅克隆及数组扁平化</title>
      <link href="/2021/12/03/deepClone/"/>
      <url>/2021/12/03/deepClone/</url>
      
        <content type="html"><![CDATA[<blockquote><p>浅克隆：只克隆多维数组的第一层，当改变对象的某个属性时另一个对象的对应属性也会发生改变，因为没有克隆它的引用地址，所以它们本质上指向的还是同一个引用地址<br>深克隆：开辟新的堆内存存储数据，两者指向不同的引用地址，修改对象的属性对克隆后的对象没有影响。</p></blockquote><h1 id="一、JSON-stringify-方法实现深克隆"><a href="#一、JSON-stringify-方法实现深克隆" class="headerlink" title="一、JSON.stringify()方法实现深克隆"></a>一、JSON.stringify()方法实现深克隆</h1><ul><li>先把一个对象变为字符串<br>  <code>JSON.Stringify(obj)</code>但是这个方法会把正则、日期都变为空对象</li><li>再把字符串变为对象<br>  <code>JSON.Parse()</code></li></ul><h1 id="二、实现轻量lodash深克隆"><a href="#二、实现轻量lodash深克隆" class="headerlink" title="二、实现轻量lodash深克隆"></a>二、实现轻量lodash深克隆</h1><h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><p>先看看如何实现浅克隆，在浅克隆的基础上实现深克隆，思路如下</p><ul><li>我们只遍历它的私有属性<code>obj.hasOwnProperty(key)</code>(不会上升到原型链)</li><li>私有属性<code>obj[key]</code>赋值给<code>obj2[key]</code><figure class="highlight maxima"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> obj = {</span><br><span class="line">    a:<span class="number">100</span>,</span><br><span class="line">    b:[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>],</span><br><span class="line">    c:{</span><br><span class="line">        x:<span class="number">10</span></span><br><span class="line">    },</span><br><span class="line">    d:/^\d+$/</span><br><span class="line">};</span><br><span class="line"><span class="built_in">let</span> arr = [<span class="number">10</span>,[<span class="number">100</span>,<span class="number">200</span>],{</span><br><span class="line">    x:<span class="number">10</span>,</span><br><span class="line">    y:<span class="number">20</span></span><br><span class="line">}]</span><br><span class="line"><span class="built_in">let</span> obj2 = {}</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">let</span> <span class="built_in">key</span> <span class="keyword">in</span> obj){</span><br><span class="line">    <span class="keyword">if</span>(!obj.hasOwnProperty(<span class="built_in">key</span>)) <span class="built_in">break</span>;</span><br><span class="line">    obj2[<span class="built_in">key</span>] = obj[<span class="built_in">key</span>];</span><br><span class="line">}</span><br><span class="line">console.<span class="built_in">log</span>(obj,obj2)</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h2><ul><li>创建一个空对象(new) <code>new obj.constructor</code>(即创建了一个对象，又克隆了它的实例，目的是克隆的结果和之前保持相同的所属类)</li><li>过滤特殊情况(obj进入for in循环前)<ul><li>分情况判断:<code>obj=null</code></li><li>obj=正则</li><li>obj=Data的情况<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">"object"</span>) <span class="keyword">return</span> obj;</span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newObj = <span class="keyword">new</span> obj.constructor;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj){</span><br><span class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(key)){</span><br><span class="line">            newObj[key] = deepClon(obj[key])</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h1 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h1><blockquote><p>数组</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾回收</title>
      <link href="/2021/11/24/Garbage-collection/"/>
      <url>/2021/11/24/Garbage-collection/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>《JavaScript高级程序设计》提到两种垃圾回收机制</p><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>JavaScript 中最常用的垃圾收集方式是标记清除( mark-and-sweep)。当变量进入环境（例如，在函数中声明一个变量〉时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进人环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变为0时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。<br>这种方法引起循环引用的问题：例如： obj1和obj2通过属性进行相互引用，两个对象的引用次数都是2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，obj1和obj2还将会继续存在，因此它们的引用次数永远不会是0，就会引起循环引用。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span> {</span><br><span class="line">    let obj1 = {};</span><br><span class="line">    let obj2 = {};</span><br><span class="line">    obj1.a = obj2; <span class="comment">// obj1 引用 obj2</span></span><br><span class="line">    obj2.a = obj1; <span class="comment">// obj2 引用 obj1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这种情况下，就要手动释放变量占用的内存：</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">obj1.a</span> =  null</span><br><span class="line"><span class="attr">obj2.a</span> =  null</span><br></pre></td></tr></tbody></table></figure><h2 id="哪些情况会导致内存泄漏"><a href="#哪些情况会导致内存泄漏" class="headerlink" title="哪些情况会导致内存泄漏"></a>哪些情况会导致内存泄漏</h2><ul><li>意外的全局变量： 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</li><li>被遗忘的计时器或回调函数： 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</li><li>脱离 DOM 的引用： 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。</li><li>闭包： 不合理的使用闭包，从而导致某些变量一直被留在内存当中。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventLoop</title>
      <link href="/2021/11/24/Event-Loop/"/>
      <url>/2021/11/24/Event-Loop/</url>
      
        <content type="html"><![CDATA[<blockquote><p>浏览器是多线程浏览器，js是单线程，浏览器只给了js一个线程来渲染</p></blockquote><ul><li>先看一些例子<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>);</span><br><span class="line">  <span class="keyword">await</span> async2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async2'</span>)</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>)</span><br><span class="line">},<span class="number">0</span>)</span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>)</span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise1'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">}).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br></pre></td></tr></tbody></table></figure>以上代码知识点<ul><li>进栈=执行（压缩到栈里是执行，执行完之后销毁的移除栈内存，不销毁的移除到栈底）</li><li>主栈是第一个执行，之后执行Event Quque事件队列，事件队列包括宏任务和微任务，微任务先执行，宏任务后执行</li><li>主栈查找事件队列，事件队列执行主栈的过程叫Even Loop</li><li>new Promise时，会立即执行EC函数，new的时候是同步的，但是执行resolve()/reject()时时异步的，当它们执行时会执行then()/catch()中的方法</li><li>所以js栈的执行顺序为 主栈-&gt;微任务队列 -&gt;宏任务队列<blockquote><p>但是微任务队列里函数的执行顺序可就不一定了，在chrome浏览器中是按照顺序执行的</p></blockquote></li><li>微任务的函数有：Promise、async、await</li><li>宏任务的函数有：定时器、事件绑定、ajax</li></ul><img src="1.jpg" alt="alt"></li></ul><h1 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h1><ul><li>在JavaScript运行时，实际上维护了一组用于执行 JavaScript 代码的代理。每个代理由一组执行上下文的集合、执行上下文栈、主线程、一组可能创建用于执行 worker 的额外的线程集合、一个任务队列以及一个微任务队列构成。除了主线程（某些浏览器在多个代理之间共享的主线程）之外，其它组成部分对该代理都是唯一的。</li><li>每个代理都是由事件循环驱动的，事件循环负责收集用事件（包括用户事件以及其他非用户事件等）、对任务进行排队以便在合适的时候执行回调。然后它执行所有处于等待中的 JavaScript 任务（宏任务），然后是微任务，然后在开始下一次循环之前执行一些必要的渲染和绘制操作。</li><li>一个任务就是指计划由标准机制来执行的任何 JavaScript，如程序的初始化、事件触发的回调等。 除了使用事件，你还可以使用 setTimeout() 或者 setInterval() 来添加任务</li><li>在 JavaScript 中，任务被分为两种，一种宏任务（MacroTask）也叫 Task，一种叫微任务（MicroTask）。</li></ul><h2 id="MacroTask（宏任务）"><a href="#MacroTask（宏任务）" class="headerlink" title="MacroTask（宏任务）"></a>MacroTask（宏任务）</h2><p>script 全部代码、setTimeout、setInterval、setImmediate（浏览器暂时不支持，只有 IE10 支持，具体可见 MDN）、I/O、UI Rendering。</p><h2 id="MicroTask（微任务）"><a href="#MicroTask（微任务）" class="headerlink" title="MicroTask（微任务）"></a>MicroTask（微任务）</h2><p>Process.nextTick（Node 独有）、Promise、Object.observe(废弃)、MutationObserver</p><h2 id="宏任务vs微任务"><a href="#宏任务vs微任务" class="headerlink" title="宏任务vs微任务"></a>宏任务vs微任务</h2><p>任务队列和微任务队列的区别</p><ul><li>当执行来自任务队列中的任务时，在每一次新的事件循环开始迭代的时候运行时都会执行队列中的每个任务。在每次迭代开始之后加入到队列中的任务需要在下一次迭代开始之后才会被执行.</li><li>每次当一个任务退出且执行上下文为空的时候，微任务队列中的每一个微任务会依次被执行。不同的是它会等到微任务队列为空才会停止执行——即使中途有微任务加入。换句话说，微任务可以添加新的微任务到队列中，并在下一个任务开始执行之前且当前事件循环结束之前执行完所有的微任务。</li></ul><h2 id="浏览器中的-Event-Loop"><a href="#浏览器中的-Event-Loop" class="headerlink" title="浏览器中的 Event Loop"></a>浏览器中的 Event Loop</h2><p>Javascript 有一个 main thread 主线程和 call-stack 调用栈(执行栈)，所有的任务都会被放到调用栈等待主线程执行。<br>事件循环中的异步队列有两种：宏任务队列可以有多个，微任务队列只有一个。</p><p>一开始执行栈空,我们可以把执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则。micro 队列空，macro 队列里有且只有一个 script 脚本（整体代码）。 全局上下文（script 标签）被推入执行栈，同步代码执行。在执行的过程中，会判断是同步任务还是异步任务，通过对一些接口的调用，可以产生新的 macro-task 与 micro-task，它们会分别被推入各自的任务队列里。同步代码执行完了，script 脚本会被移出 macro 队列，这个过程本质上是队列的 macro-task 的执行和出队的过程。 上一步我们出队的是一个 macro-task，这一步我们处理的是 micro-task。但需要注意的是：当 macro-task 出队时，任务是一个一个执行的；而 micro-task 出队时，任务是一队一队执行的。因此，我们处理 micro 队列这一步，会逐个执行队列中的任务并把它出队，直到队列被清空。<br>当某个宏任务执行完后,会查看是否有微任务队列。如果有，先执行微任务队列中的所有任务，如果没有，会读取宏任务队列中排在最前的任务，执行宏任务的过程中，遇到微任务，依次加入微任务队列。栈空后，再次读取微任务队列里的任务，依次类推。<br>node 中的事件循环的顺序</p><ul><li>timers 阶段：这个阶段执行 timer（setTimeout、setInterval）的回调</li><li>I/O callbacks 阶段：处理一些上一轮循环中的少数未执行的 I/O 回调</li><li>idle, prepare 阶段：仅 node 内部使用</li><li>poll 阶段：获取新的 I/O 事件, 适当的条件下 node 将阻塞在这里</li><li>check 阶段：执行 setImmediate() 的回调</li><li>close callbacks 阶段：执行 socket 的 close 事件回调<blockquote><p>总结：浏览器环境下，microtask 的任务队列是每个 macrotask 执行完之后执行。而在 Node.js 中，microtask 会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行 microtask 队列的任务。</p></blockquote></li></ul><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timer1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().<span class="keyword">then</span>(function () {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">  })</span><br><span class="line">}, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timer2'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().<span class="keyword">then</span>(function () {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">  })</span><br><span class="line">}, <span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p>浏览器端运行结果：timer1=&gt;promise1=&gt;timer2=&gt;promise2<br>Node 端运行结果：timer1=&gt;timer2=&gt;promise1=&gt;promise2<br>微任务和宏任务的区别<br>宏任务：DOM 渲染后触发， 如 setTimeout; 是由浏览器规定的<br>微任务：DOM 渲染前触发，如 Promise；是 ES6 规定的</p>]]></content>
      
      
      <categories>
          
          <category> 异步 </category>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>element-ui</title>
      <link href="/2021/11/07/element-ui/"/>
      <url>/2021/11/07/element-ui/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h1><blockquote><p><code>&lt;template slot-scope="scope"&gt; &lt;/template&gt;</code>:element-ui作用域插槽，定义在通过Scoped slot可以获取到row，column，$index和store(table内部的状态管理)的数据，scope是table内部基于onlyTableData生成出来的(一个类似于excel的表格数据)，我们可以通过scope.row获取当前行的数据</p></blockquote><ul><li>通过scope.$index可以直接取到该单元格值</li><li>scope.row直接取到该单元格对象,即:onlyTableData[scope.$index]</li></ul><figure class="highlight handlebars"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 静态属性表格 --&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"onlyTableData"</span> <span class="attr">border</span> <span class="attr">stripe</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="comment">&lt;!-- 展开行 --&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">"expand"</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="comment">&lt;!-- 循环渲染Tag标签 --&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in scope.row.attr_vals"</span> <span class="attr">:key</span>=<span class="string">"i"</span> <span class="attr">closable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">                           @<span class="attr">close</span>=<span class="string">"handleClose(i, scope.row)"</span>&gt;</span></span><span class="template-variable">{{<span class="name">item</span>}}</span><span class="xml"><span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="comment">&lt;!-- 输入的文本框 --&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">class</span>=<span class="string">"input-new-tag"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                         <span class="attr">v-if</span>=<span class="string">"scope.row.inputVisible"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                         <span class="attr">v-model</span>=<span class="string">"scope.row.inputValue"</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="comment">&lt;!-- 添加按钮 --&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"button-new-tag"</span> <span class="attr">size</span>=<span class="string">"small"</span> @<span class="attr">click</span>=<span class="string">"showInput(scope.row)"</span>&gt;</span>+ New Tag<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ul><li>table表格中：data = “onlyTableData”为源数据，数据结构如下</li></ul><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">onlyTableData :[</span><br><span class="line">    {</span><br><span class="line"><span class="symbol">        attr_id:</span> <span class="number">3068</span></span><br><span class="line"><span class="symbol">        attr_name:</span> <span class="string">"主体商品"</span></span><br><span class="line"><span class="symbol">        attr_sel:</span> <span class="string">"only"</span></span><br><span class="line"><span class="symbol">        attr_vals:</span> [</span><br><span class="line">                     <span class="string">"三室"</span></span><br><span class="line">                     <span class="string">"这是个电视"</span></span><br><span class="line">                     <span class="string">"电视机"</span>]</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line"><span class="symbol">        </span></span><br><span class="line"><span class="symbol">        attr_id:</span> <span class="number">3070</span></span><br><span class="line"><span class="symbol">        attr_name:</span> <span class="string">"系统-智能电视"</span></span><br><span class="line"><span class="symbol">        attr_sel:</span> <span class="string">"only"</span></span><br><span class="line"><span class="symbol">        attr_vals:</span></span><br><span class="line">        [<span class="string">"智能电视,透明电视"</span>]</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line"><span class="symbol">        attr_id:</span> <span class="number">3071</span></span><br><span class="line"><span class="symbol">        attr_name:</span> <span class="string">"外观-壁挂安装"</span></span><br><span class="line"><span class="symbol">        attr_sel:</span> <span class="string">"only"</span></span><br><span class="line"><span class="symbol">        attr_vals:</span> [<span class="string">"支持,挂壁,挂壁"</span>]</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><ul><li>为数据调用函数时，| 调用</li></ul><figure class="highlight handlebars"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"创建时间"</span> <span class="attr">prop</span>=<span class="string">"add_time"</span> <span class="attr">width</span>=<span class="string">"140px"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              </span><span class="template-variable">{{<span class="name">scope.row.add_time</span> | dataFormate}}</span><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js目录下的全局过滤时间函数</span></span><br><span class="line">Vue.filter(<span class="string">'dataFormate'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">originVal</span>)</span>{</span><br><span class="line">  <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(originVal)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> y = dt.getFullYear()</span><br><span class="line">  <span class="keyword">const</span> m =( dt.getMonth()+<span class="number">1</span>+<span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>) <span class="comment">//padStart(2,'0'):不足两位补字符串0</span></span><br><span class="line">  <span class="keyword">const</span> d = (dt.getDate()+<span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hh = (dt.getHours() + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">  <span class="keyword">const</span> mm = (dt.getMinutes() + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">  <span class="keyword">const</span> ss = (dt.getSeconds() + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">${y}</span>-<span class="subst">${m}</span>-<span class="subst">${d}</span> <span class="subst">${hh}</span>:<span class="subst">${mm}</span>:<span class="subst">${ss}</span>`</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="作用域插槽解耦数据"><a href="#作用域插槽解耦数据" class="headerlink" title="作用域插槽解耦数据"></a>作用域插槽解耦数据</h2><p>项目中遇到：input会共享数据，当改变一个文本框的值时，其他的文本框的值也会随之改变，可用通过作用域插槽对这两个数据进行解耦，实现数据单独控制对应值，在getParamData里控制文本框的显示与隐藏，在v-if里定义作用域插槽实现单个数据上传</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &lt;el-table-column <span class="keyword">type</span>=<span class="string">"expand"</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- + New Tag的文本框 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">class</span>=<span class="string">"input-new-tag"</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">v-if</span>=<span class="string">"scope.row.inputVisible"</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">v-model</span>=<span class="string">"scope.row.inputValue"</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">           @<span class="attr">blur</span>=<span class="string">"handleInputConfirm(scope.row)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 添加按钮 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"button-new-tag"</span> <span class="attr">size</span>=<span class="string">"small"</span> @<span class="attr">click</span>=<span class="string">"showInput(scope.row)"</span>&gt;</span>+ New Tag<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">showInput</span>(<span class="params">row</span>)</span> {</span><br><span class="line">  row.inputVisible = <span class="literal">true</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><img src="tagData.gif" alt="alt"></p><h1 id="级联选择器"><a href="#级联选择器" class="headerlink" title="级联选择器"></a>级联选择器</h1><p>el-cascader</p>]]></content>
      
      
      
        <tags>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令</title>
      <link href="/2021/11/03/gitInstruct/"/>
      <url>/2021/11/03/gitInstruct/</url>
      
        <content type="html"><![CDATA[<h1 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h1><p><code>git checkout</code>（切换分支） -b xx 创建新分支xx</p><p><code>git branch</code>：查看当前分支</p><p><code>git status</code> ：检查当前分支的文件状态</p><p><code>git add .</code>：添加到暂存区</p><p><code>git push -u origin xx</code> 第一次推送新分支xx（当github仓库没有xx分支时，要加上-u）</p><h1 id="合并分支（合并xx到主分支）"><a href="#合并分支（合并xx到主分支）" class="headerlink" title="合并分支（合并xx到主分支）"></a>合并分支（合并xx到主分支）</h1><p><code>git checkout main</code></p><p><code>git merge xx</code></p><p><code>git push</code> 推送到云端</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="/2021/11/03/lifeVue/"/>
      <url>/2021/11/03/lifeVue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h1><blockquote><p>Vue生命周期的过程指在vue中实例创建到销毁的过程，即从创建，初始化数据，编译模板，挂载Dom-&gt;渲染，更新-&gt;渲染，卸载等一系列过程，我们可以把组件比喻成流水线，工人是生命周期，当任务流转到工人身边的时候，工人就开始工作，在Vue生命周期钩子会自动绑定this上下文到实例中，因此你可以访问数据，对prototype方法进行运算，这说明你<strong>不能使用箭头函数</strong>定义生命周期方法</p></blockquote><h1 id="生命周期的阶段"><a href="#生命周期的阶段" class="headerlink" title="生命周期的阶段"></a>生命周期的阶段</h1><blockquote><p>vue生命周期总共可以分为8个阶段，创建前后，载入前后，更新前后，销毁前后，以及一些特殊场景上的生命周期</p></blockquote><table><thead><tr><th>生命周期</th><th>描述</th></tr></thead><tbody><tr><td>beforeCreate</td><td>组件实例被创建之初</td></tr><tr><td>created</td><td>组件实例已经完全创建</td></tr><tr><td>beforeMount</td><td>组件挂载之前</td></tr><tr><td>mounted</td><td>组件挂载到实例上之后</td></tr><tr><td>beforeUpdate</td><td>组件数据发生变化，更新之前</td></tr><tr><td>updated</td><td>组件数据更新之后</td></tr><tr><td>beforeDestroy</td><td>组件实例销毁之前</td></tr><tr><td>destoryed</td><td>组件实例销毁之后</td></tr><tr><td>activated</td><td>kee-alive缓存的组件激活时</td></tr><tr><td>deactivated</td><td>keep-alive缓存的组件激活时</td></tr><tr><td>errorCaptured</td><td>捕获一个来自子孙组建的错误时被调用</td></tr></tbody></table><h1 id="生命周期的流程"><a href="#生命周期的流程" class="headerlink" title="生命周期的流程"></a>生命周期的流程</h1><p><img src="lifecycle.png" alt="alt"></p><h2 id="beforeCreate-gt-created"><a href="#beforeCreate-gt-created" class="headerlink" title="beforeCreate -> created"></a>beforeCreate -&gt; created</h2><ul><li>初始化vue实例，进行数据观测</li></ul><h2 id="created"><a href="#created" class="headerlink" title="created"></a>created</h2><ul><li>完成数据观测，属性与方法的运算，watch，event事件毁掉的配置</li><li>可调用methods中的方法，访问和修改data数据触发响应式渲染dom，可通过computed和watch完成数据计算</li><li>此时vm.el并没有被创建<blockquote><p>在实例挂载之后，元素可以用 vm.$el 访问。</p></blockquote></li></ul><h2 id="created-gt-beforeMount"><a href="#created-gt-beforeMount" class="headerlink" title="created -> beforeMount"></a>created -&gt; beforeMount</h2><ul><li>判断是否存在el选项，若不存在则停止编译，直到调用vm.$mount(el)才会继续编译</li><li>优先级：render &gt; template &gt; outerHTML</li><li>vm.el获取到的是挂载DOM的</li></ul><h2 id="beforeMount-gt-mounted"><a href="#beforeMount-gt-mounted" class="headerlink" title="beforeMount -> mounted"></a>beforeMount -&gt; mounted</h2><ul><li>在此阶段可以获取到vm.el</li><li>此阶段vm.el虽已完成DOM初始化，但并未挂载在el选项上</li></ul><h2 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h2><ul><li>vm.el已完成DOM的挂载与渲染，刺客打印vm.$el，发现之前的挂载点及内容已被替换成新的DOM</li></ul><h2 id="beforeUpdata"><a href="#beforeUpdata" class="headerlink" title="beforeUpdata"></a>beforeUpdata</h2><ul><li>更新的数据必须是被渲染在模板上的(el、template、rander之一)</li><li>此时view层还未更新</li><li>若在beforeUpdate中再次修改数据，不会再次触发更新方法</li></ul><h2 id="updata"><a href="#updata" class="headerlink" title="updata"></a>updata</h2><ul><li>完成值view视图的更新</li><li>若在updated中再次修改数据，会再次触发更新方法(beforeUpdate、updated)</li></ul><h2 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h2><ul><li>实例被销毁前调用，此时实例属性与方法仍可访问</li></ul><h2 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h2><ul><li>完全销毁一个实例，可清理它与其他实例的链接，解绑它的全部指令及事件监听器</li><li>并不能清除DOM仅仅销毁实例</li></ul><h1 id="数据请求在created和mounted的区别"><a href="#数据请求在created和mounted的区别" class="headerlink" title="数据请求在created和mounted的区别"></a>数据请求在created和mounted的区别</h1><ul><li>created是在组件实例一旦创建完成时立即调用，这时候页面dom节点并未生成</li><li>mounted是在页面dom节点渲染完毕之后就立即执行的触发时机上，created势必mounted更早</li><li>两者的相同点：都能拿到实例对象的属性和方法，两者最大的不同就是触发时机的不同</li><li>数据请求放在mounted可能导致页面闪动(页面dom结构已经生成)，但如果在页面加载完成则不会出现此情况</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async/await-Promise</title>
      <link href="/2021/10/28/async-await-Promise/"/>
      <url>/2021/10/28/async-await-Promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="Promise概念"><a href="#Promise概念" class="headerlink" title="Promise概念"></a>Promise概念</h2><p>在开发过程中我们会遇到这样的问题</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = require('fs')</span><br><span class="line">fs.read<span class="constructor">File('.<span class="operator">/</span><span class="params">a</span>.<span class="params">txt</span>','<span class="params">utf8</span>',<span class="params">function</span>(<span class="params">err</span>,<span class="params">data</span>)</span>{</span><br><span class="line">  fs.read<span class="constructor">File(<span class="params">data</span>,'<span class="params">utf8</span>',<span class="params">function</span>(<span class="params">err</span>,<span class="params">data</span>)</span>{</span><br><span class="line">    fs.read<span class="constructor">File(<span class="params">data</span>,'<span class="params">utf8</span>',<span class="params">function</span>(<span class="params">err</span>,<span class="params">data</span>)</span>{</span><br><span class="line">      console.log(data)</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>以上代码的缺点有：</p><ul><li>后一个请求需要依赖于前一个请求成功后才将数据往下传递，会导致多个ajax请求嵌套的情况代码不够直观</li><li>如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作</li></ul><p>使用Promise方法对代码改进后：后一个请求不需要依赖于前一个请求的数据，提高了代码的可维护性</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">url</span>)</span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>{</span><br><span class="line">    fs.readFile(url,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>{</span><br><span class="line">      error &amp;&amp; reject(error)</span><br><span class="line">      resolve(data)</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line">read(<span class="string">'./a.txt'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>{</span><br><span class="line">  <span class="keyword">return</span> read(data) </span><br><span class="line">}).then(<span class="function"><span class="params">data</span>=&gt;</span>{</span><br><span class="line">  <span class="keyword">return</span> read(data)  </span><br><span class="line">}).then(<span class="function"><span class="params">data</span>=&gt;</span>{</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Promise是一个对象，它代表了一个异步操作的最终完成或者失败，是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，它的出现大大改善了异步编程的困境并且避免了回调地狱。简单来说Promise就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上来说，Promise是一个对象，可以获取异步操作的消息。Promise提供统一的API，各种异步操作都可以用同样的方法进行处理</p></blockquote><h2 id="Promise的实例有三个状态和两个过程"><a href="#Promise的实例有三个状态和两个过程" class="headerlink" title="Promise的实例有三个状态和两个过程"></a>Promise的实例有三个状态和两个过程</h2><p>三个状态：</p><ul><li>Pending（进行中）</li><li>Resolved（已完成）</li><li>Rejected（已拒绝）<br>当把一件事情交给promise时，它的状态就是Pending，任务完成了状态就变成了Resolved、没有完成失败了就变成了Rejected。</li></ul><p>两个过程：</p><ul><li>pending -&gt; fulfilled : Resolved（已完成）</li><li>pending -&gt; rejected：Rejected（已拒绝）</li></ul><h2 id="Promise的特点："><a href="#Promise的特点：" class="headerlink" title="Promise的特点："></a>Promise的特点：</h2><ul><li>对象的状态不受外界影响。promise对象代表一个异步操作，有三种状态，pending（进行中）、fulfilled（已成功）、rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是promise这个名字的由来——“承诺”；</li><li>一旦状态改变就不会再变，任何时候都可以得到这个结果。promise对象的状态改变，只有两种可能：从pending变为fulfilled，从pending变为rejected。这时就称为resolved（已定型）。如果改变已经发生了，你再对promise对象添加回调函数，也会立即得到这个结果，即在本轮事件循环运行完成之前，回调函数是不会被调用的。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。</li></ul><h2 id="Promise方法"><a href="#Promise方法" class="headerlink" title="Promise方法"></a>Promise方法</h2><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> success<span class="constructor">Callback(<span class="params">result</span>)</span> {</span><br><span class="line">    console.log('文件创建成功'+result)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">function</span> failure<span class="constructor">Callback(<span class="params">result</span>)</span> {</span><br><span class="line">    console.log('文件创建失败'+result)</span><br><span class="line">}</span><br><span class="line">create<span class="constructor">AudioFileAsync(<span class="params">audioSettings</span>,<span class="params">successCallback</span>,<span class="params">failureCallback</span>)</span></span><br></pre></td></tr></tbody></table></figure><p>如果函数createAudioFileAsync()被重写为返回Promise的形式</p><figure class="highlight mercury"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const <span class="keyword">promise</span> <span class="built_in">=</span> createAudioFileAsync(audioSettings)</span><br><span class="line"><span class="keyword">promise</span>.<span class="built_in">then</span>(successCallback,failureCallback)</span><br></pre></td></tr></tbody></table></figure><h3 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h3><ul><li>then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中第二个参数可以省略。</li><li>then方法返回的是一个新的Promise实例（不是原来那个Promise实例）,即使异步操作已经完成，在这之后会通过then()添加的回调函数也会被调用。因此可以采用链式写法，即then方法后面再调用另一个then方法。</li><li>多次调用then()可以添加多个回调函数，它们会按照插入顺序进行执行<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>{</span><br><span class="line">    ajax(<span class="string">'first'</span>).success(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>{</span><br><span class="line">        resolve(res);</span><br><span class="line">    })</span><br><span class="line">})</span><br><span class="line">promise.then(<span class="function"><span class="params">res</span>=&gt;</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resovle,reject</span>)=&gt;</span>{</span><br><span class="line">        ajax(<span class="string">'second'</span>).success(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>{</span><br><span class="line">            resolve(res)</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">}).then(<span class="function"><span class="params">res</span>=&gt;</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resovle,reject</span>)=&gt;</span>{</span><br><span class="line">        ajax(<span class="string">'second'</span>).success(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>{</span><br><span class="line">            resolve(res)</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">}).then(<span class="function"><span class="params">res</span>=&gt;</span>{</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="catch"><a href="#catch" class="headerlink" title="catch()"></a>catch()</h3><blockquote><p>该方法相当于then方法的第二个参数，指向reject的回调函数。不过catch方法还有一个作用，就是在执行resolve回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入catch方法中。</p></blockquote><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="keyword">then</span>(<span class="function"><span class="params">(data)</span> =&gt;</span> {</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'resolved'</span>,data);</span><br><span class="line">},<span class="function"><span class="params">(err)</span> =&gt;</span> {</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'rejected'</span>,err);</span><br><span class="line">     }</span><br><span class="line">); </span><br><span class="line">p.<span class="keyword">then</span>(<span class="function"><span class="params">(data)</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>,data);</span><br><span class="line">}).<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>,err);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h3><blockquote><p>返回一个新的 promise, 只有所有的 promise 都成功才成功。</p></blockquote><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">javascript</span><br><span class="line">let promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve,reject)</span>=&gt;</span>{</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span>{</span><br><span class="line">       resolve(<span class="number">1</span>);</span><br><span class="line">    },<span class="number">2000</span>)</span><br><span class="line">});</span><br><span class="line">let promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve,reject)</span>=&gt;</span>{</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span>{</span><br><span class="line">       resolve(<span class="number">2</span>);</span><br><span class="line">    },<span class="number">1000</span>)</span><br><span class="line">});</span><br><span class="line">let promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve,reject)</span>=&gt;</span>{</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span>{</span><br><span class="line">       resolve(<span class="number">3</span>);</span><br><span class="line">    },<span class="number">3000</span>)</span><br><span class="line">});</span><br><span class="line"><span class="built_in">Promise</span>.all([promise1,promise2,promise3]).<span class="keyword">then</span>(res=&gt;{</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="regexp">//</span>结果为：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="race"><a href="#race" class="headerlink" title="race()"></a>race()</h3><blockquote><p>返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的结果状态(并非是数组中的第一个，而是第一个完成的 promise)</p></blockquote><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">let promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve,reject)</span>=&gt;</span>{</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span>{</span><br><span class="line">       reject(<span class="number">1</span>);</span><br><span class="line">    },<span class="number">2000</span>)</span><br><span class="line">});</span><br><span class="line">let promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve,reject)</span>=&gt;</span>{</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span>{</span><br><span class="line">       resolve(<span class="number">2</span>);</span><br><span class="line">    },<span class="number">1000</span>)</span><br><span class="line">});</span><br><span class="line">let promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve,reject)</span>=&gt;</span>{</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span>{</span><br><span class="line">       resolve(<span class="number">3</span>);</span><br><span class="line">    },<span class="number">3000</span>)</span><br><span class="line">});</span><br><span class="line"><span class="built_in">Promise</span>.race([promise1,promise2,promise3]).<span class="keyword">then</span>(res=&gt;{</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="regexp">//</span>结果：<span class="number">2</span></span><br><span class="line">},rej=&gt;{</span><br><span class="line">    <span class="built_in">console</span>.log(rej)};</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally()"></a>finally()</h3><blockquote><p>finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p></blockquote><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> {···})</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> {···})</span><br><span class="line">.finally(<span class="function"><span class="params">()</span> =&gt;</span> {···});</span><br></pre></td></tr></tbody></table></figure><ul><li>上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数。</li></ul><h1 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h1><blockquote><p>Async与Await实际开发中应用：<br>axios获取数据，返回一个promise对象，不会返回具体的数值<br><img src="promise.jpg" alt="alt"><br>当使用Async/Await来封装的时候会返回具体的数值<br><img src="await.jpg" alt="alt"></p></blockquote><blockquote><p>Async/await是promise的一种语法糖，它也是为了解决回调地狱的问题，从本质上来讲，await函数仍然是promise，其原理跟Promise相似，不过比起Promise之后用then方法来执行相关一步操作，async/await 则把异步操作变得更像传统函数操作。</p></blockquote><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> <span class="title">f</span>() {</span><br><span class="line">    <span class="keyword">return</span> <span class="type">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在函数前面async这个关键字总是可以返回一个promise，其它的值将自动被包装在一个resolved的promise中<br>下列代码相当于上述代码</p><figure class="highlight oxygene"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> <span class="comment">{</span></span></span><br><span class="line"><span class="comment"><span class="function">    return 1;</span></span></span><br><span class="line"><span class="comment"><span class="function">}</span></span></span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">()</span>.<span class="title">then</span><span class="params">(alert)</span>;</span><span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者是显式地返回一个Promise，结果相同</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> <span class="comment">{</span></span></span><br><span class="line"><span class="comment"><span class="function">    return Promise.resolve(1)</span></span></span><br><span class="line"><span class="comment"><span class="function">}</span></span></span><br><span class="line"><span class="function"><span class="title">f</span><span class="params">()</span>.<span class="title">then</span><span class="params">(alert)</span>;</span><span class="comment">//1</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>async 确保了函数返回一个promise，也会将非promise的值包装进去</p></blockquote><h1 id="Await"><a href="#Await" class="headerlink" title="Await"></a>Await</h1><blockquote><p>await关键字的作用是等到promise完成(settle)并返回结果，下面例子就是1s后resolve的promise</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">'done'</span>),<span class="number">1000</span>)</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> promise <span class="comment">//等到promise resolve(*)</span></span><br><span class="line">    alert(result);<span class="comment">//'done'</span></span><br><span class="line">}</span><br><span class="line">f();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这个函数在执行的时候，暂停在了（*）那一行，并在promise settle是，拿到reslut作为结果继续往下执行，<strong>await实际上会暂停函数的执行，直到promise状态变为settled</strong>，然后以promise的结果继续执行。这个行为不会耗费任何CPU资源，js引擎可以同时处理其他任务，相对于promise.then，它只是获取promise结果的一个更优雅的语法，同时也更易于读写</p></blockquote><h1 id="async-await对比Promise的优势"><a href="#async-await对比Promise的优势" class="headerlink" title="async/await对比Promise的优势"></a>async/await对比Promise的优势</h1><p>代码读起来更加同步，Promise虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担<br>Promise传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅<br>错误处理友好，async/await可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余<br>调试友好，Promise的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 异步 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OSI</title>
      <link href="/2021/10/23/OSI/"/>
      <url>/2021/10/23/OSI/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/qishui/p/5428938.html">https://www.cnblogs.com/qishui/p/5428938.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode1</title>
      <link href="/2021/10/22/leetCode1/"/>
      <url>/2021/10/22/leetCode1/</url>
      
        <content type="html"><![CDATA[<h1 id="去重，排序"><a href="#去重，排序" class="headerlink" title="去重，排序"></a>去重，排序</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目优化过程</title>
      <link href="/2021/10/22/vue-shop/"/>
      <url>/2021/10/22/vue-shop/</url>
      
        <content type="html"><![CDATA[<h1 id="分离开发模式与发布模式"><a href="#分离开发模式与发布模式" class="headerlink" title="分离开发模式与发布模式"></a>分离开发模式与发布模式</h1><blockquote><p>通过vue-cli3.0工具生成的项目，默认隐藏了所有的webpack配置项，如果要修改webpack默认配置的需求，可以在跟目录中按需创建vue.config.js这个配置文件，从而对项目的打包发布过程做自定义的配置<br>默认情况下vue的开发模式与发布模式共用一个打包的入口文件，为了将项目的开发过程与发布过程分离，我们可以分为两种模式各自指定打包的入口文件<br>开发模式入口：src/main-dev.js<br>发布模式入口：src/main-prod.js</p></blockquote><p>修改webpack配置方式</p><ol><li>configureWebpack：链式编程的形式</li><li>chainWebpack(项目采用)：操作对象的形式<blockquote><p>NODE_ENV是一个用户自定义的变量，在webpack中它的用途是判断生产环境或开发环境<br>vue.config.js配置如下</p></blockquote><figure class="highlight roboconf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = {</span><br><span class="line"><span class="attribute">chainWebpack</span>:config=&gt;{</span><br><span class="line">        //发布模式</span><br><span class="line">        config<span class="variable">.when</span>(process<span class="variable">.env</span><span class="variable">.NODE_ENV</span> === 'production',config=&gt;{</span><br><span class="line">            config<span class="variable">.entry</span>('app')<span class="variable">.clear</span>()<span class="variable">.add</span>('./src/main-prod<span class="variable">.js</span>')</span><br><span class="line">        })</span><br><span class="line">        //开发模式</span><br><span class="line">        config<span class="variable">.when</span>(process<span class="variable">.env</span><span class="variable">.NODE_ENV</span> === 'development',config=&gt;{</span><br><span class="line">            config<span class="variable">.entry</span>('app')<span class="variable">.clear</span>()<span class="variable">.add</span>('./src/main-dev<span class="variable">.js</span>')</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="项目文件体积过大"><a href="#项目文件体积过大" class="headerlink" title="项目文件体积过大"></a>项目文件体积过大</h1><h2 id="通过externals加载外部CDN资源"><a href="#通过externals加载外部CDN资源" class="headerlink" title="通过externals加载外部CDN资源"></a>通过externals加载外部CDN资源</h2><blockquote><p>默认情况下，通过import语法导入的第三方依赖包最终会被打包并合并到同一个文件中从而导致打包成功后，单文件体积过大的问题<br>为了解决以上问题，缩小依赖项的内存，可以通过webpack的externals节点，来配置并加载外部的CDN资源。它的作用就是不会打包依赖项合并到同一个文件里，当用到的某个包的时候直接去window的全局对象上寻找并且直接使用</p></blockquote><ul><li>优化流程<ol><li>vue.config.js中设置config.set()  用来配置externals节点<figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//只在发布模式需要配置external</span><br><span class="line">config.when(process.env.NODE_ENV === <span class="string">'production'</span>, config =&gt; {</span><br><span class="line">        config</span><br><span class="line">            .entry(<span class="string">'app'</span>)</span><br><span class="line">            .clear()</span><br><span class="line">            .<span class="built_in">add</span>(<span class="string">'./src/main-prod.js'</span>)</span><br><span class="line"></span><br><span class="line">        config.<span class="keyword">set</span>(<span class="string">'externals'</span>, {</span><br><span class="line">            vue: <span class="string">'Vue'</span>,</span><br><span class="line">            <span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">            axio<span class="variable">s:</span> <span class="string">'axios'</span>,</span><br><span class="line">            lodash: <span class="string">'_'</span>,</span><br><span class="line">            echart<span class="variable">s:</span> <span class="string">'echarts'</span>,</span><br><span class="line">            nprogres<span class="variable">s:</span> <span class="string">'NProgress'</span>,</span><br><span class="line">            <span class="string">'vue-quill-editor'</span>: <span class="string">'VueQuillEditor'</span></span><br><span class="line">        })</span><br></pre></td></tr></tbody></table></figure></li><li>删除main-prod.js中import的包，在public/index.html中引入CDN资源文件替代<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nprogress 的样式表文件 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/nprogress/0.2.0/nprogress.min.css"</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 富文本编辑器 的样式表文件 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/quill/1.3.4/quill.core.min.css"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/quill/1.3.4/quill.snow.min.css"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/quill/1.3.4/quill.bubble.min.css"</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- element-ui 的样式表文件 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/element-ui/2.15.6/theme-chalk/index.css"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="首页内容的自定制（辨别项目是处于开发模式-发布模式）"><a href="#首页内容的自定制（辨别项目是处于开发模式-发布模式）" class="headerlink" title="首页内容的自定制（辨别项目是处于开发模式/发布模式）"></a>首页内容的自定制（辨别项目是处于开发模式/发布模式）</h2>当属于开发模式时，电商管理系统前自动会渲染上dev-，当属于发布模式时，渲染的title就只有电商管理系统这几个字</li></ol></li><li>优化步骤</li></ul><ol><li>vue.config.js编写业务逻辑，发布模式isProd为true，开发模式isProd为false<figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">module.exports = {</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">// 发布模式</span></span><br><span class="line">        config.when(process.env.NODE_ENV === <span class="string">'production'</span>, config =&gt; {</span><br><span class="line">            config.plugin(<span class="string">'html'</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> {</span><br><span class="line">                args[<span class="number">0</span>].isProd = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">return</span> args</span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开发模式</span></span><br><span class="line">        config.when(process.env.NODE_ENV === <span class="string">'development'</span>, config =&gt; {</span><br><span class="line">            config.plugin(<span class="string">'html'</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> {</span><br><span class="line">                args[<span class="number">0</span>].isProd = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">return</span> args</span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li>public/index.html中根据isProd的值来决定如何渲染页面结构<blockquote><p>发布模式下需要加载CDN资源(import来引入)，不需要加上-dev；开发模式下需要加上-dev，并且需要加载CDN资源</p></blockquote><figure class="highlight erb"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--按需渲染页面的标题 htmlWebpackPlugin:插件名称 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%=</span><span class="ruby"> htmlWebpackPlugin.options.isProd ? <span class="string">''</span> : <span class="string">'dev - '</span> </span><span class="xml">%&gt;电商后台管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--按需加载外部的CDN资源--&gt;</span></span></span><br><span class="line"><span class="xml">    &lt;%</span><span class="ruby"> <span class="keyword">if</span>(htmlWebpackPlugin.options.isProd){ </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    CDN资源</span></span><br><span class="line"><span class="xml">    &lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><blockquote><p>当打包构建项目时，JavaScript包会变得非常大，如果我们能把不同路由对应的组件分割成不同的代码块，当路由被访问的时候才会加载对应组件会变得非常高效</p></blockquote></li></ol><ul><li>优化步骤</li></ul><ol><li>安装@babel/plugin-syntax-dynamic-import包</li><li>在babel.config.js配置文件中声明该插件</li><li>将路由改为按需加载的形式<br>webpackChunkName:规定了分配多个组件打包到同一个js文件的Group<figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">//<span class="keyword">import</span> <span class="keyword">Login</span> <span class="keyword">from</span> <span class="string">'@/components/Login.vue'</span></span><br><span class="line">const <span class="keyword">Login</span> = () =&gt;</span><br><span class="line">    <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "login_home_welcome" */</span> <span class="string">'@/components/Login.vue'</span>)</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式</title>
      <link href="/2021/10/21/designModel/"/>
      <url>/2021/10/21/designModel/</url>
      
        <content type="html"><![CDATA[<h1 id="发布-订阅者模式"><a href="#发布-订阅者模式" class="headerlink" title="发布-订阅者模式"></a>发布-订阅者模式</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>其他遍历方法</title>
      <link href="/2021/10/21/ergodic3/"/>
      <url>/2021/10/21/ergodic3/</url>
      
        <content type="html"><![CDATA[<h1 id="for"><a href="#for" class="headerlink" title="for"></a>for</h1><blockquote><p>在执行的时候，会先判断执行条件再执行，for循环可以用来遍历数组，字符串，类数组，DOM节点等，可以改变原数组</p></blockquote><h1 id="while"><a href="#while" class="headerlink" title="while"></a>while</h1><blockquote><p>while循环中的结束条件可以是各种类型，但是最终都会转化为布尔值</p></blockquote><ul><li>Boolean：true，false</li><li>String：空字符串为false，所有非空字符串为true</li><li>Number：0为false，非0数字为true</li><li>null/Undefinded/NaN:全为假</li><li>Object：全为真</li></ul><p>while和for一样，都是先判断再执行，只要指定条件为true，循环就可以一直执行代码</p><h1 id="do-while"><a href="#do-while" class="headerlink" title="do/while"></a>do/while</h1><blockquote><p>该方法会先执行再判断，即使初始条件不成立,do/while循环也会至少执行一次，不建议使用do/while来遍历数组</p></blockquote><figure class="highlight maxima"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">num</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">num</span>);</span><br><span class="line">    <span class="built_in">num</span>--;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">num</span> &gt;= <span class="number">0</span>);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">num</span>); //-<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h1 id="for-await-of"><a href="#for-await-of" class="headerlink" title="for await of"></a>for await of</h1><blockquote><p><code>for await of</code>方法被称为异步迭代器，该方法是主要用来遍历异步对象<br><code>for await of</code>语句会在异步或者同步可迭代对象上创建一个迭代循环，包括String，Array，类数组，Map，Set和自定义的异步或者同步可迭代对象。<strong>这个语句只能在async function内使用</strong></p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Gen</span>(<span class="params">time</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            resolve(time)</span><br><span class="line">        },time)</span><br><span class="line">    })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> arr = [Gen(<span class="number">2000</span>),Gen(<span class="number">100</span>),Gen(<span class="number">3000</span>)]</span><br><span class="line">    <span class="keyword">for</span> <span class="function"><span class="title">await</span>(<span class="params"><span class="keyword">let</span> item <span class="keyword">of</span> arr</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Promise</span>,<span class="built_in">Date</span>.now(),item)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">test()</span><br></pre></td></tr></tbody></table></figure><p>输出结果：<br><img src="async.jpg" alt="alt"></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS对象遍历方法</title>
      <link href="/2021/10/21/ergodic2/"/>
      <url>/2021/10/21/ergodic2/</url>
      
        <content type="html"><![CDATA[<h1 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h1><blockquote><p>for in主要用于循环对象属性，循环中的代码每执行一次，就会对对象的属性进行一次操作<br>语法：</p></blockquote><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(var i in obj)</span></span> {</span><br><span class="line">    <span class="comment">/*dosomthing*/</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>i：必须，指定的变量可以是数组元素，也可以是对象的属性</li><li>obj：必须，指定迭代的对象</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj){</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'键名'</span>,i);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'键值'</span>,obj[i])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出结果：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">键名：<span class="selector-tag">a</span></span><br><span class="line">键值：<span class="number">1</span></span><br><span class="line">键名：<span class="selector-tag">b</span></span><br><span class="line">键值：<span class="number">2</span></span><br><span class="line">键名：c</span><br><span class="line">键值：<span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><h2 id="point"><a href="#point" class="headerlink" title="point"></a>point</h2><ul><li>for in放啊不仅会遍历当前对象的所有可枚举属性，还会遍历其原型链上的属性</li></ul><h1 id="Object-keys-Object-values-Object-entries"><a href="#Object-keys-Object-values-Object-entries" class="headerlink" title="Object.keys()/Object.values()/Object.entries()"></a>Object.keys()/Object.values()/Object.entries()</h1><blockquote><p>遍历对象，它会返回一个有给定对象的自身可枚举属性(不含继承和Symbol属性)组成的数组，数组元素的排列顺序和正常循环遍历该对象时返回的顺序一致，返回值如下</p></blockquote><ul><li><code>Object.keys()</code> 返回包含对象<strong>键名</strong>的数组</li><li><code>Object.values()</code>返回包含对象<strong>键值</strong>的数组</li><li><code>Object.entries()</code>返回包含对象<strong>键名和键值</strong>的数组</li></ul><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let obj = {</span><br><span class="line">    id : <span class="number">1</span>,</span><br><span class="line">    <span class="type">name</span> : <span class="string">'hello'</span>,</span><br><span class="line">    age : <span class="number">18</span></span><br><span class="line">};</span><br><span class="line">console.log(<span class="keyword">Object</span>.keys(obj)); //[<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'age'</span>]</span><br><span class="line">console.log(<span class="keyword">Object</span>.<span class="keyword">values</span>(obj)); //[<span class="number">1</span>,<span class="string">'hello'</span>,<span class="number">18</span>]</span><br><span class="line">console.log(<span class="keyword">Object</span>.entries(obj)); //[[<span class="string">'id'</span>,<span class="number">1</span>],[<span class="string">'name'</span>,<span class="string">'hello'</span>],[<span class="string">'age'</span>,<span class="number">18</span>]]</span><br></pre></td></tr></tbody></table></figure><h2 id="point-1"><a href="#point-1" class="headerlink" title="point"></a>point</h2><ul><li>Object.keys()方法但会数组中的值都是字符串，即不是字符串的key值会转化为字符串</li><li>结果数组中的属性值都是对象本身<strong>可枚举的属性</strong>，不包括继承来的属性</li></ul><h1 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h1><blockquote><p><code>Object.getOwnPropertyNames()</code>方法与<code>Object.keys()</code>类似，也是接受一个对象作为参数，返回一个数组，包含了改对象自身的所以属性名，但是它能返回<strong>不可枚举属性</strong></p></blockquote><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a = [<span class="string">'hello'</span>,<span class="string">'world'</span>];</span><br><span class="line"></span><br><span class="line">Object.keys(a); <span class="regexp">//</span>[<span class="string">'0'</span>,<span class="string">'1'</span>]</span><br><span class="line">Object.getOwnPropertyNames(a); <span class="regexp">//</span>[<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'length'</span>]</span><br></pre></td></tr></tbody></table></figure><p>这两个方法都可以用来计算对象中属性的个数：</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = {<span class="number">0</span>:<span class="character">'a'</span>,<span class="number">1</span>:<span class="character">'b'</span>,<span class="number">2</span>:<span class="character">'c'</span>};</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">OwnPropertyName(<span class="params">obj</span>)</span>; <span class="comment">//['0','1','2']</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>keys(obj).length;<span class="comment">//3</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">OwnPropertyNames(<span class="params">obj</span>)</span>.length;<span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><h1 id="Object-getOwnPropertySymbols"><a href="#Object-getOwnPropertySymbols" class="headerlink" title="Object.getOwnPropertySymbols()"></a>Object.getOwnPropertySymbols()</h1><blockquote><p>Object.getOwnPropertySymbols()方法返回对象自身的Symbol属性组成的数组，不包括字符串属性</p></blockquote><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let obj = {a:<span class="number">1</span>}</span><br><span class="line"><span class="regexp">//</span>给对象添加一个不可枚举的<span class="built_in">Symbol</span>属性</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj,{</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">'baz'</span>)]:{</span><br><span class="line">        value:<span class="string">'Symbol baz'</span>,</span><br><span class="line">        enumerable:<span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="regexp">//</span>不可枚举的<span class="built_in">Symbol</span>属性</span><br><span class="line">obj[<span class="built_in">Symbol</span>(<span class="string">'foo'</span>)] = <span class="string">'Symbol foo'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj).forEach(<span class="function"><span class="params">(key)</span> =&gt;</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(obj[key])</span><br><span class="line">})</span><br><span class="line"><span class="regexp">//</span>输出结果：<span class="built_in">Symbol</span> baz <span class="built_in">Symbol</span> foo</span><br></pre></td></tr></tbody></table></figure><h1 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys()"></a>Reflect.ownKeys()</h1><blockquote><p>Reflect.ownKeys()返回一个数组，包含对象自身的所有属性，它和Object.keys()类似，Object.keys()返回属性key，但不包括不可枚举的属性，而Reflect.ownKeys()会返回所有属性key：</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'method'</span>,{</span><br><span class="line">    <span class="attr">value</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        alert(<span class="string">'No enumerable property'</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">false</span></span><br><span class="line">})</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// ['a','b']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(obj)); <span class="comment">//['a','b','method']</span></span><br></pre></td></tr></tbody></table></figure><h2 id="point-2"><a href="#point-2" class="headerlink" title="point"></a>point</h2><ul><li>Object.keys():相当于返回对象属性数组</li><li>Reflect.ownKeys()：相当于 <code>Object.getOwnPropertyNames(obj.concat(Object.getOwnPropertySymbols(obj)))</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组遍历方法</title>
      <link href="/2021/10/17/jump/"/>
      <url>/2021/10/17/jump/</url>
      
        <content type="html"><![CDATA[<h1 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h1><blockquote><p>forEach方法用于调用数组中的每个元素，将元素传递给回调函数，数组中的每个值都会调用回调函数<br>语法：<code>arr.forEach(callback(currentValue,index,arr),isValue)</code></p></blockquote><p>callback<br>    - currentValue：（必须）当前元素<br>    - index：可选，当前元素的索引值<br>    - arr：可选，当前元素所属的数组对象</p><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="params">(item,index,arr)</span> =&gt;</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">':'</span> + item)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>第二个参数用来绑定回调函数内的this变量(回调不能是箭头函数，因为箭头函数无this)</p></blockquote><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="literal">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="literal">[<span class="number">7</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>]</span></span><br><span class="line">arr.<span class="keyword">for</span><span class="constructor">Each(<span class="params">function</span>(<span class="params">item</span>,<span class="params">index</span>,<span class="params">arr</span>)</span>{</span><br><span class="line">    console.log(this<span class="literal">[<span class="identifier">index</span>]</span>);<span class="comment">//[7,8,7.9]</span></span><br><span class="line">},arr1)</span><br></pre></td></tr></tbody></table></figure><ul><li>forEach方法不会改变原数组，也没有返回值</li><li>forEach无法使用break，continue跳出循环</li><li>forEach无法遍历对象，仅适用于数组的遍历</li></ul><h1 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h1><blockquote><p>map()方法会返回一个新数组，该方法按照原始数组元素顺序依次处理元素<br>语法：<code>arr.map(callback(currentValue,index,arr),thisValue)</code></p></blockquote><p>callback<br>    - currentValue：（必须）当前元素<br>    - index：可选，当前元素的索引值<br>    - arr：可选，当前元素所属的数组对象</p><figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="keyword">map</span>(<span class="type">item</span> =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="type">item</span> +<span class="number">1</span> ; //[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>第二个参数用来绑定参数函数内部的this变量</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>[e]; <span class="comment">//['b','c']</span></span><br><span class="line">},arr)</span><br></pre></td></tr></tbody></table></figure><p>该方法还可以进行链式调用</p><figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="keyword">map</span>(<span class="type">item</span> =&gt; <span class="type">item</span> + <span class="number">1</span>).<span class="keyword">map</span>(<span class="type">item</span> =&gt; <span class="type">item</span> +<span class="number">1</span>)//输出结果:[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li>map方法不会对空数组进行检测</li><li>map方法遍历数组时会返回一个新数组，不改变原始数组</li><li>map方法有返回值，可以return出来，map的回调函数函数中支持return返回值</li></ul><h1 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h1><blockquote><p>for…of语句创建一个循环来迭代可迭代的对象，在es6中引入的for…of替代for…in和forEach<br>语法：<code>for(variable of iterable){ statement }</code></p></blockquote><ul><li>variable:每个迭代的属性值被分配给该变量</li><li>iterable：一个具有可枚举属性并且可以迭代的对象</li></ul><figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[</span><br><span class="line">    <span class="built_in">{id</span>:<span class="number">1</span>,value:<span class="string">'hello'</span>},</span><br><span class="line">    <span class="built_in">{id</span>:<span class="number">2</span>,value:<span class="string">'world'</span>},</span><br><span class="line">    <span class="built_in">{id</span>:<span class="number">3</span>,value:<span class="string">'Javascript'</span>}</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> <span class="type">item</span> <span class="keyword">of</span> arr){</span><br><span class="line">    console.log(<span class="type">item</span>);</span><br><span class="line">    //<span class="built_in">{id</span>:<span class="number">1</span>,value:<span class="string">'hello'</span>},</span><br><span class="line">    //<span class="built_in">{id</span>:<span class="number">2</span>,value:<span class="string">'world'</span>},</span><br><span class="line">    //<span class="built_in">{id</span>:<span class="number">3</span>,value:<span class="string">'Javascript'</span>}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>for of方法只会遍历当前对象的属性，不会遍历其原型链上的属性</li><li>for of方法适用遍历<strong>数组/类数组/字符串/map/set</strong>等拥有迭代对象的集合</li><li>for of方法不支持遍历普通对象，因为其没有迭代器对象，如果想要遍历一个对象的属性可以使用for in方法</li><li>可以使用break，continue，return来中断循环遍历</li></ul><h1 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h1><blockquote><p>filter()方法用于过滤数组，满足条件的元素会被返回，它的参数是一个回调函数，所有数组元素一次执行该函数，结果为true的元素被返回，如果没有符合条件的元素，则会返回空数组<br>语法：<code>arr.filter(callback(currentValue,index,arr),thisValue)</code></p></blockquote><p>callback<br>    - currentValue:必须，数组中正在处理的元素<br>    - index：可选，当前元素索引<br>    - arr：可选，当前元素所属的数组对象</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.<span class="built_in">filter</span>(<span class="keyword">item</span> =&gt; <span class="keyword">item</span> &gt; <span class="number">2</span>)<span class="comment"></span></span><br><span class="line"><span class="comment">//[3,4,5]</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>第二个参数用来绑定函数内部的this变量<br> 可以使用filter方法来移除数组中的undefined，null，NAN等值</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="literal">undefined</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">false</span>,<span class="string">''</span>,<span class="number">4</span>,<span class="number">0</span>]</span><br><span class="line">arr.filter(<span class="built_in">Boolean</span>);<span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></tbody></table></figure><ul><li>filter方法会返回新数组，不会改变原数组</li><li>filter方法不会对空数组进行检测</li><li>filter方法仅仅用于检测数组</li></ul><h1 id="some-every"><a href="#some-every" class="headerlink" title="some()/every()"></a>some()/every()</h1><blockquote><p>some方法会对数组中的每一项进行遍历，只要有一个元素符合条件，就会返回true，且剩余的元素不会再进行检测，否则就返回false<br>语法<code>arr.some(callback(currentValue,index,arr),thisValue)</code></p></blockquote><blockquote><p>every()方法会对数组中的每一项进行遍历，只有所有元素都符合条件时，才会返回true，如果数组中检测到有个元素不满足，则整个表达式返回false，且剩余的元素不会再进行检测<br>语法：<code>arr.every(callback(currentValue,index,arr),thisValue)</code></p></blockquote><figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.<span class="keyword">some</span>(<span class="type">item</span> =&gt; <span class="type">item</span> &gt; <span class="number">4</span>) //<span class="built_in"> true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.<span class="keyword">every</span>(<span class="type">item</span> =&gt; <span class="type">item</span> &gt;<span class="number">0</span>) //true</span><br></pre></td></tr></tbody></table></figure><ul><li>两个方法都不会改变原数组，会返回一个布尔值</li><li>两个方法都不会对空数组进行检测</li><li>两个方法都适用于检测数组</li></ul><h1 id="reduce-reduceRight"><a href="#reduce-reduceRight" class="headerlink" title="reduce()/reduceRight()"></a>reduce()/reduceRight()</h1><blockquote><p>reduce()方法接受一个函数作为累加器，数组中的每个值(从左到右)开始缩减，最终计算为一个值，reduce方法会为数组中的<strong>每一个元素依次执行回调函数</strong>，不包括数组中被删除或从未被赋值的元素<br>语法：<code>arr.reduce(callback(total,currentValue,currentIndex,arr)initialValue)</code></p></blockquote><p>callback<br>    - total：上一次调用回调返回的值，或者是提供的初始值(initialValue)<br>    - currentValue:当前被处理的元素；<br>    - currentIndex：当前元素的索引<br>    - arr：当前元素所属的数组对象<br>该方法的第二个参数是initialValue，表示传递给函数的初始值，作为第一次调用callback的第一个参数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> sum = arr.reduce(<span class="function">(<span class="params">prev,cur,index,arr</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(prev,cur,index);</span><br><span class="line">    <span class="keyword">return</span> prev + cur;</span><br><span class="line">})</span><br><span class="line"><span class="built_in">console</span>.log(arr,sum);</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">//1 2 1</span></span><br><span class="line"><span class="comment">//3 3 2</span></span><br><span class="line"><span class="comment">//6 4 3</span></span><br><span class="line"><span class="comment">//[1,2,3,4]10</span></span><br></pre></td></tr></tbody></table></figure><p>加一个初始值之后</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> sum = arr.reduce(<span class="function">(<span class="params">prev,cur,index,arr</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(prev,cur,index);</span><br><span class="line">    <span class="keyword">return</span> prev + cur;</span><br><span class="line">},<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr,sum);</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">//5 1 0</span></span><br><span class="line"><span class="comment">//6 2 1</span></span><br><span class="line"><span class="comment">//8 3 2</span></span><br><span class="line"><span class="comment">//11 4 3</span></span><br><span class="line"><span class="comment">//[1,2,3,4] 15</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>由此可以得出结论，如果没有提供初始值initialValue，reduce会从索引1的地方开始执行callback方法，跳过第一个索引，如果提供了initialValue，从索引0开始执行</p></blockquote><p>reduceRight方法和reduce的用法几乎一致，只是该方法是对数组进行倒序遍历的，而reduce方法是正序遍历</p><ul><li>两个方法在添加初始值的情况下才会改变原数组，否则不会改变原数组，会将这两个初始值放在数组的最后一位</li><li>两个方法对于空数组是不会执行回调函数的</li></ul><h1 id="find-findIndex"><a href="#find-findIndex" class="headerlink" title="find()/findIndex()"></a>find()/findIndex()</h1><blockquote><p>find方法返回通过函数内判断符合条件的值,当数组中的元素在测试条件返回true时，find返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素则返回undefined<br>语法：<code>arr.find(callback(currentValue,index,arr),thisValue)</code></p></blockquote><blockquote><p>findIndex方法返回通过函数内判断符合条件的值的索引，之后的值不会再调用执行函数，如果没有符合条件的元素返回-1<br>语法：<code>arr.findIndex(callback(currentValue,index,arr),thisValue)</code></p></blockquote><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="literal">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span></span><br><span class="line">arr.find(item =&gt; item &gt; <span class="number">2</span>); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="literal">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span></span><br><span class="line">arr.find<span class="constructor">Index(<span class="params">item</span> =&gt; <span class="params">item</span> &gt; 2)</span>; <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure><ul><li>两个方法对于空数组，函数是不会执行的</li><li>两个方法不会改变原数组</li></ul><h1 id="keys-values-entries"><a href="#keys-values-entries" class="headerlink" title="keys()/values()/entries()"></a>keys()/values()/entries()</h1><blockquote><p>三个方法都返回一个数组的迭代对象，对象的内容不太相同</p></blockquote><ul><li>keys() 返回数组的<strong>索引</strong>值：<code>arr.keys()</code></li><li>values() 返回数组的<strong>元素</strong>:<code>arr.values()</code></li><li>entries() 返回数组的<strong>键值对</strong>:<code>arr.entries()</code></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'Banana'</span>,<span class="string">'Orange'</span>,<span class="string">'Apple'</span>,<span class="string">'Mango'</span>];</span><br><span class="line"><span class="comment">//这三个方法都没有参数</span></span><br><span class="line"><span class="keyword">const</span> iterator1 = arr.keys();</span><br><span class="line"><span class="keyword">const</span> iterator2 = arr.values();</span><br><span class="line"><span class="keyword">const</span> iterator3 = arr.entries();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> iterator1){</span><br><span class="line">    <span class="built_in">console</span>.log(item); <span class="comment">//0 1 2 3</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> iterator2){</span><br><span class="line">    <span class="built_in">console</span>.log(item); <span class="comment">//Banana Orage Apple Mango</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> iterator3){</span><br><span class="line">    <span class="built_in">console</span>.log(item);<span class="comment">//[0, 'Banana'] [1, 'Orange'] [2, 'Apple'] [3, 'Mango']</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础一</title>
      <link href="/2021/10/14/baseVue/"/>
      <url>/2021/10/14/baseVue/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总结自官方文档</p></blockquote><h1 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h1><h2 id="创建应用实例"><a href="#创建应用实例" class="headerlink" title="创建应用实例"></a>创建应用实例</h2><ul><li>Vue应用都是通过createApp函数创建一个新的应用实例，由于createApp方法返回实例本身，因此可以在其后 链式调用其他方法</li><li>调用createApp返回一个应用实例。应用实例挂载的整个组件树共享的上下文。<figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const app = Vue<span class="selector-class">.createApp</span>({</span><br><span class="line">    <span class="comment">//根组件</span></span><br><span class="line">})</span><br><span class="line"><span class="comment">//该实例用来在应用中注册“全局”组件</span></span><br><span class="line">const app = Vue<span class="selector-class">.createApp</span>({})</span><br><span class="line">app<span class="selector-class">.component</span>(<span class="string">'searchInput'</span>,SearchComponent)</span><br><span class="line">app<span class="selector-class">.directive</span>(<span class="string">'focus'</span>,FocusDirective)</span><br><span class="line">app<span class="selector-class">.use</span>(LocalePlugin)</span><br><span class="line"><span class="comment">//应用实例暴露的大多数方法都会返回同一实例，允许链式</span></span><br><span class="line">Vue<span class="selector-class">.createApp</span>({})</span><br><span class="line">    <span class="selector-class">.component</span>(<span class="string">'searchInput'</span>,searchInputComponent)</span><br><span class="line">    <span class="selector-class">.directive</span>(<span class="string">'focus'</span>,FocusDirective)</span><br><span class="line">    <span class="selector-class">.use</span>(LocalePlugin)</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="根组件"><a href="#根组件" class="headerlink" title="根组件"></a>根组件</h2><ul><li>传递给createApp的选项用于配置根组件,当我们挂载应用时，该组件被用作渲染的起点</li><li>一个应用需要被挂载到一个DOM元素中，例如你想吧一个Vue应用挂载到<div id="app"></div>,应该传入#app<figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const RootComponent ={</span><br><span class="line">    <span class="comment">//选项</span></span><br><span class="line">}</span><br><span class="line">const app = <span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>create<span class="constructor">App(RootComponent)</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="组件实例property"><a href="#组件实例property" class="headerlink" title="组件实例property"></a>组件实例property</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vuex</title>
      <link href="/2021/10/09/paper-vuex/"/>
      <url>/2021/10/09/paper-vuex/</url>
      
        <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p><img src="1.png" alt="alt"></p><ul><li>当多个组件依赖于同一状态时，对于多层嵌套的组件的传参将会非常繁琐，并且对于兄弟组件间的状态无能为力</li><li>来自不同组件的行为需要变更同一状态，以往采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码</li><li>综上，<strong>当项目遇到多个组件依赖于同一状态时；或者来自不同组件的行为需要变更同一状态时</strong>可以使用Vuex</li></ul><blockquote><p>Vuex实现了一个单向数据流，在全局中拥有一个State存放数据，当组件要更改State中的数据时，必须通过Mutation进行，Mutation同时提供了订阅者模式供外部插件调用获取State数据的更新，而当所以异步操作（常见于调用后端接口异步获取更新数据）或批量的同步操作需要走Action，但Action也是无法直接修改State的，还是需要通过MutationlI修改State的数据。最后，根据State的变化，渲染到视图上</p></blockquote><h2 id="引入Vuex"><a href="#引入Vuex" class="headerlink" title="引入Vuex"></a>引入Vuex</h2><ul><li>安装依赖npm install vuex –save</li><li>项目目录src中建立store文件夹</li><li>在store文件夹下新建index.js文件，写入<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="comment">//不是在生产环境debug为true</span></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span>;</span><br><span class="line"><span class="comment">//创建Vuex实例对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">    <span class="attr">strict</span>:debug,<span class="comment">//在不是生产环境下都开启严格模式</span></span><br><span class="line">    <span class="attr">state</span>:{</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">getters</span>:{</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">mutations</span>:{</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">actions</span>:{</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></tbody></table></figure></li><li>main.js中引入Vuex<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">    <span class="attr">store</span>:store,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">}).$mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="Vuex核心属性"><a href="#Vuex核心属性" class="headerlink" title="Vuex核心属性"></a>Vuex核心属性</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>Vuex的state相当于一个全局的state，你可以在component的任何地方获取和修改它。如果有些状态严格属于单个组件，最好还是作为组件的局部状态</p><figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取<span class="keyword">state</span></span><br><span class="line">this.<span class="variable">$store</span>.<span class="keyword">state</span>.count</span><br></pre></td></tr></tbody></table></figure><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p>Vuex里的getters类似于computed，可以认为是store的计算属性，getter的返回值会根据它的依赖被缓存起来，且只有当它的以来至发生了改变才会被重新计算</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>直接使用</span><br><span class="line">this.<span class="variable">$store</span>.getters.doneTodoCount</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>或者</span><br><span class="line">import {mapGetters} from <span class="string">'vuex'</span></span><br><span class="line">computed:mapGetters({</span><br><span class="line">    doneCount:<span class="string">'doneTodoCount'</span></span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><p>更改Vuex的store状态的唯一方法时提交mutaion，mutation必须是同步函数</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>直接触发mutations</span><br><span class="line">this.<span class="variable">$store</span>.commit(<span class="string">'xxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>或者</span><br><span class="line">import { mapMutations } from <span class="string">'vuex'</span></span><br><span class="line">methods：mapMutations([<span class="string">'increment'</span> ])</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>Action类似mutation，不同在于</p><ul><li>Action提交的是mutation，而不是直接变更状态</li><li>Action可以包含任何异步操作<figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>触发action</span><br><span class="line">store.dispatch(<span class="string">'increment'</span>)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>或者</span><br><span class="line">import {mapActions} from <span class="string">'vuex'</span></span><br><span class="line">methods:mapActions([<span class="string">'increment'</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象，当应用变得非常复杂时，store对象就有可能变得臃肿，为了解决以上问题，Vuex允许我们将store分割成模块(moudule)。每个模块拥有自己的state，mutation，action，getter，甚至是嵌套子模块–从上至下进行相同方式的分割<figure class="highlight pf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = {</span><br><span class="line">  <span class="keyword">state</span>: { ... },</span><br><span class="line">  mutations: { ... },</span><br><span class="line">  actions: { ... },</span><br><span class="line">  getters: { ... }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = {</span><br><span class="line">  <span class="keyword">state</span>: { ... },</span><br><span class="line">  mutations: { ... },</span><br><span class="line">  actions: { ... }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = new Vuex.Store({</span><br><span class="line">  modules: {</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">store.<span class="keyword">state</span>.a // -&gt; moduleA 的状态</span><br><span class="line">store.<span class="keyword">state</span>.b // -&gt; moduleB 的状态</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目，仿写去哪儿app</title>
      <link href="/2021/10/05/paper-project-VueWhere/"/>
      <url>/2021/10/05/paper-project-VueWhere/</url>
      
        <content type="html"><![CDATA[<iframe scrolling="no" width="100%" height="300" src="https://jsfiddle.net/o2gxgz9r/embedded/js,resources,html,css,result/light" frameborder="0" loading="lazy" allowfullscreen=""></iframe><h1 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h1><h2 id="解决文字溢出的方法："><a href="#解决文字溢出的方法：" class="headerlink" title="解决文字溢出的方法："></a>解决文字溢出的方法：</h2><p>textOverflow()<br>  white-space:nowrap;<br>  text-overflow:ellipsis;<br>  overflow:hidden;</p><h2 id="表格边框写法"><a href="#表格边框写法" class="headerlink" title="表格边框写法"></a>表格边框写法</h2><h1 id="首页数据前台接口部分"><a href="#首页数据前台接口部分" class="headerlink" title="首页数据前台接口部分"></a>首页数据前台接口部分</h1><h2 id="优化冗余路径"><a href="#优化冗余路径" class="headerlink" title="优化冗余路径"></a>优化冗余路径</h2><blockquote><p>把<a href="http://localhost:8080/static/mock">http://localhost:8080/static/mock</a>   冗余的路径替换成api</p></blockquote><p><img src="api1.jpg" alt="alt"><br><img src="api3.jpg" alt="alt"></p><blockquote><p>修改系统文件，在webpack下设置代理项，重置路径</p></blockquote><p><img src="api2.jpg" alt="alt"></p><h1 id="vue路由"><a href="#vue路由" class="headerlink" title="vue路由"></a>vue路由</h1><h2 id="项目中使用到的路由跳转的方法"><a href="#项目中使用到的路由跳转的方法" class="headerlink" title="项目中使用到的路由跳转的方法"></a>项目中使用到的路由跳转的方法</h2><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><p>实现hot页面上点击的城市渲染到header上<br><img src="router1.jpg" alt="alt"></p><ul><li><p>不带参数<br><code>&lt;router-link :to = "{name:'home'}"&gt;</code> 建议使用name<br><code>&lt;router-link :to = "{path:'/home'}"&gt;</code></p><blockquote><p>router-link中链接如果是’/‘开始就是从根路由开始,如果开始不带’/‘,则从当前路由开始</p></blockquote></li><li><p>带参数</p></li></ul><p><code>&lt;router-link :to="{name:'home',params:{id:1}}"&gt;</code></p><blockquote><p>params传参(类似post) 配置path:”/home:id”或path:”/home/:id”,刷新页面id会保留，不配置path；第一次可请求，刷新页面id会消失</p></blockquote><p><code>&lt;router-link :to = "{name:'home',query:{id:1}}"&gt;</code></p><blockquote><p>query传参(类似get，url后面会显示参数)路由不可配置</p></blockquote><h3 id="this-router-push-函数里调用"><a href="#this-router-push-函数里调用" class="headerlink" title="this.$router.push()(函数里调用)"></a>this.$router.push()(函数里调用)</h3><p><img src="router2.jpg" alt="alt"></p><ul><li><p>不带参数<br><code>this.$router.push('/home')</code><br><code>this.$router.push({name:'home'})</code><br><code>this.$router.push({path:'/home'})</code></p></li><li><p>query传参<br><code>this.$router.push({name:'home',query:{id:'1'})</code><br><code>this.$router.push({path:'/home',query:{id:'1'}})</code></p></li><li><p>params传参<br><code>this.$router.push(name:'home',params:{id:'1'})</code> 只能用name</p></li></ul><h2 id="keep-alive减少相同请求优化"><a href="#keep-alive减少相同请求优化" class="headerlink" title="keep-alive减少相同请求优化"></a>keep-alive减少相同请求优化</h2><blockquote><p>keep-alive本身是vue2.0的功能，为了让组件数据缓存，避免每次资源加载重复请求</p></blockquote><ul><li>不切换城市的时候不需要重新发送dataHome请求<br><img src="route.jpg" alt="alt"></li><li>设置keep-alive<br><img src="route1.jpg" alt="alt"></li><li>需要重新设置Home里的请求数据的方法getHttp（）<br><img src="route2.jpg" alt="alt"></li></ul><h1 id="vuex实现子组件到子组件的通信"><a href="#vuex实现子组件到子组件的通信" class="headerlink" title="vuex实现子组件到子组件的通信"></a>vuex实现子组件到子组件的通信</h1><blockquote><p>项目中除了从City页面中的子页面到Home中的子页面用的是子组件的通信，其他的都是父组件到子组件通信</p></blockquote><ul><li>点击hot页面的城市跳转到首页并且header右边的城市变为相对应的城市<br>项目相关配置<br><img src="vuex.jpg" alt="alt"><br>List文件下配置<br><img src="vuex1.jpg" alt="alt"></li></ul><h1 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h1><h2 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h2><p>在实战中发现多次通过路由切换组件页面滚动和点击事件都会失效</p><blockquote><p>解决方法：<br>初始化<br>首先要引入组件，需要dom结构加载完成时才执行初始化（$nextTick）。因此，需要用上钩子函数created()或者mounted()。</p></blockquote><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="wrapper" <span class="keyword">ref</span>="wrapper"&gt;</span><br><span class="line">  &lt;div <span class="keyword">class</span>="content"&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span></span><br><span class="line">mounted() {</span><br><span class="line">      this.$nextTick(() =&gt; {</span><br><span class="line">        //$refs绑定元素</span><br><span class="line">        <span class="keyword">if</span>(!this.scroll){</span><br><span class="line">            this.scroll = <span class="built_in">new</span> BScroll(this.$refs.<span class="keyword">wrapper</span>, {</span><br><span class="line">            //开启点击事件 默认为<span class="keyword">false</span></span><br><span class="line">            click:<span class="keyword">true</span></span><br><span class="line">        })</span><br><span class="line">        // console.log(this.scroll)</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(!this.$refs.<span class="keyword">wrapper</span>){</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            this.scroll.<span class="keyword">refresh</span>()</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原型</title>
      <link href="/2021/09/25/paper-prototype/"/>
      <url>/2021/09/25/paper-prototype/</url>
      
        <content type="html"><![CDATA[<h1 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h1><h2 id="函数对象和普通对象"><a href="#函数对象和普通对象" class="headerlink" title="函数对象和普通对象"></a>函数对象和普通对象</h2><blockquote><p>在js中，创建对象有好几种方式，比如对象字面量，或者是直接通过构造函数new一个对象出来，虽然都是对象，却存在着差异性，js中，我们将对象分为函数对象和普通对象。函数对象就是用函数来模拟类的实现</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>)</span>{}</span><br><span class="line"><span class="keyword">const</span> func2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{};</span><br><span class="line"><span class="keyword">const</span> func3 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'name'</span>,<span class="string">'console.log(name)'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = {};</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">const</span> obj3 = <span class="keyword">new</span> func1();</span><br><span class="line"><span class="keyword">const</span> obj4 = <span class="keyword">new</span> <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>);<span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>);<span class="comment">//function</span></span><br></pre></td></tr></tbody></table></figure><ul><li>上述代码中，obj1,obj2,obj3,obj4都是普通对象</li><li>func1，func2，func3都是Function的实例，也就是函数对象</li><li>可以看出<strong>所有Function的实例都是函数对象其他都为普通对象包括Function实例的实例</strong></li><li>Function和new Function的关系为<code>Function.__proto__=== Function.prototype</code><blockquote><p>__proto__和constructor是对象独有的，prototype属性是函数独有的，但是在js中函数也是对象，所以函数也拥有__proto__和constructor属性</p></blockquote></li></ul><p><img src="1.jpg" alt="alt"></p><h2 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h2><blockquote><p>es规范里描述prototype是一个隐式引用，但是之前的一些浏览器已经私自实现了__proto__这个属性，使得可以通过obj.__proto__这个显示的属性访问访问到被定义为隐式属性的prototype</p></blockquote><ul><li>__proto__属性既不能被for…in遍历出来，也不能被Object.keys(obj)查找出来</li><li>访问对象的obj.<strong>proto</strong>,默认走的是object.prototype对象上__proto__属性的get/set方法</li><li>__proto__是函数指向对象</li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><blockquote><p>__proto__是对象所独有的，并且__proto__是一个对象指向父类对象，它的作用是当你在访问一个对象属性的时候，如果对象内部没有这个属性，那他就在他的__proto__属性所指的对象（父类对象）上查找，如果父类对象依旧不存在这个属性，那他就在他父类的__proto__所指的对象上查找，以此类推，直到找到null，这个查找的过程也构成了原型链</p></blockquote><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><blockquote><p>在规范里，prototype被定义为<strong>给其他对象提供共享属性的对象</strong></p></blockquote><ul><li>prototype自己也是对象，只是被用以承担某个职能</li><li>所有对象都可以作为另一个对象的prototype使用</li><li>prototype是<strong>函数</strong>独有的，它的作用是可以给特定类型的所有实例提供共享的属性和方法，<strong>任何函数在创建的时候，都会给该函数添加prototype属性</strong><br><img src="2.jpg" alt="alt"></li></ul><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><blockquote><p>constructor属性也是对象所独有的，它是<strong>一个对象指向一个函数</strong>，这个函数就是该对象的构造函数</p></blockquote><ul><li>每个对象都有对应本身或者继承而来的构造函数</li><li>只有prototype对象有constructor这个属性</li><li>在每个函数创建的时候js会同时创建一个prototype对象，且<code>该对象创建的函数.__proto__ === 该函数.prototype</code>，<code>该函数.prototype.constructor === 该函数</code></li><li>所以通过函数创建的对象即使已经没有constructor属性，也能通过__proto__找到对应的constructor<br><img src="3.jpg" alt="alt"><blockquote><p>上图虚线表示继承来的constructor</p></blockquote></li></ul><h1 id="typeof-amp-amp-instanceof"><a href="#typeof-amp-amp-instanceof" class="headerlink" title="typeof &amp;&amp; instanceof"></a>typeof &amp;&amp; instanceof</h1><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><blockquote><p>typeof一般被用来判断一个变量的类型</p></blockquote><ul><li>我们可以使用typeof来判断number、undefined、symbol、string、function、boolean、object 这七种数据类型，</li><li>但是判断Object的时候并不能明确的告诉你object属于哪一种object<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>);</span><br><span class="line"><span class="keyword">typeof</span> s === <span class="string">'object'</span><span class="comment">//true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;<span class="comment">//'object'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3>js在底层存储变量的时候会在变量的机器码的低位1-3位存储其类型信息</li><li>1：整数</li><li>110：布尔</li><li>100：字符串</li><li>010：浮点数</li><li>000：对象<br>对于undefined和null、，这两个值的信息存储是特殊的</li><li>null：所有机器码均为0</li><li>undefined：用 −2^30 整数来表示<blockquote><p>在使用typeof来判断变量类型的时候，最好用typeof来判断基本数据类型，避免对null的判断</p></blockquote></li></ul><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><blockquote><p>instanceof运算符用来检测constructor.prototype是否存在于object的原型链上，与typeof方法不同的是，instanceof方法要求开发者明确地确认对象为某特定类型</p></blockquote><ul><li>如下，是instanceof的基本用法，它可以判断一个实例是否是其父类型或者祖先类型的实例<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>)</span>{} </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params"></span>)</span>{} </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> C; <span class="comment">// true，因为 Object.getPrototypeOf(o) === C.prototype</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> D; <span class="comment">// false，因为 D.prototype 不在 o 的原型链上</span></span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true，因为 Object.prototype.isPrototypeOf(o) 返回 true</span></span><br><span class="line">C.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true，同上</span></span><br><span class="line"></span><br><span class="line">C.prototype = {};</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">o2 <span class="keyword">instanceof</span> C; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> C; <span class="comment">// false，C.prototype 指向了一个空对象,这个空对象不在 o 的原型链上.</span></span><br><span class="line"></span><br><span class="line">D.prototype = <span class="keyword">new</span> C(); <span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> D();</span><br><span class="line">o3 <span class="keyword">instanceof</span> D; <span class="comment">// true</span></span><br><span class="line">o3 <span class="keyword">instanceof</span> C; <span class="comment">// true 因为 C.prototype 现在在 o3 的原型链上</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="类的prototype属性和-proto-属性"><a href="#类的prototype属性和-proto-属性" class="headerlink" title="类的prototype属性和__proto__属性"></a>类的prototype属性和__proto__属性</h1><blockquote><p>大多数浏览器中，每一个对象都有__proto__属性，指向对应的构造函数的prototype属性。Class作为构造函数的语法糖，同时拥有prototype属性和__proto__属性，因此同时存在两条继承链</p></blockquote><ul><li>子类的__proto__属性，表示<strong>构造函数</strong>的继承，总是指向父类</li><li>子类prototype属性的__proto__属性，表示<strong>方法</strong>的继承，总是指向父类的prototype属性<figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class Father{ </span><br><span class="line">}</span><br><span class="line">Class Child extends Father{</span><br><span class="line">}</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Child</span>.</span><span class="module"><span class="identifier">__proto__</span> </span><span class="operator">==</span></span>= Father;<span class="comment">//true</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Child</span>.</span></span>prototype.__proto__<span class="operator"> === </span><span class="module-access"><span class="module"><span class="identifier">Father</span>.</span></span>prototype;<span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure>上面代码中，子类的__proto__属性指向父类，子类的prototype属性的__proto__属性指向父类的prototype属性<br>这样是因为类的继承是按照下面的模式实现的<figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class Father{</span><br><span class="line">}</span><br><span class="line">Class Child{</span><br><span class="line">}</span><br><span class="line"><span class="comment">//Child的实例继承Father的实例</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>set<span class="constructor">PrototypeOf(Child.<span class="params">prototype</span>,Father.<span class="params">prototype</span>)</span>;</span><br><span class="line"><span class="comment">//Child继承Father的静态属性</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>set<span class="constructor">Prototype(Child,Father)</span></span><br><span class="line"></span><br><span class="line">const c = <span class="keyword">new</span> <span class="constructor">Child()</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><code>Object.setPrototypeOf</code>方法的实现如下：<br>Object.setPrototypeOf = function(obj,proto){<br>    obj.<strong>proto</strong> = proto;<br>    return obj;<br>}<br>因此就得到了上面的结果</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>set<span class="constructor">PrototypeOf(Child.<span class="params">prototype</span>,Father.<span class="params">prototype</span>)</span>;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Child</span>.</span></span>prototype.__proto__ = <span class="module-access"><span class="module"><span class="identifier">Father</span>.</span></span>prototype;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>set<span class="constructor">PrototypeOf(Child,Father)</span>;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Child</span>.</span><span class="module"><span class="identifier">__proto__</span> </span></span>= Father;</span><br></pre></td></tr></tbody></table></figure><p>这两条继承链可以这样理解：作为一个对象，子类(Child)的原型(__proto__属性)是父类(Father)；作为一个构造函数，子类(Child)的原型对象(prototype属性)是父类原型对象(prototype属性)的实例</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Child</span>.</span></span>prototype = <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Father</span>.</span></span>prototype);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Child</span>.</span></span>prototype.__proto__ = <span class="module-access"><span class="module"><span class="identifier">Father</span>.</span></span>prototype;</span><br></pre></td></tr></tbody></table></figure><p>extends关键字后面可以跟很多种类型的值</p><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面代码中的Father只要有一个有prototype属性的函数就能被Child继承，由于函数都有prototype属性(处理Function.prototype函数)，因此Father可以是任何函数<br>下面讨论两种情况，第一种，子类继承Object类</p><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Object</span></span>{</span><br><span class="line">}</span><br><span class="line"><span class="type">Child</span>.__proto__ === <span class="type">Object</span><span class="comment">//ture</span></span><br><span class="line"><span class="type">Child</span>.prototype.__proto__ = <span class="type">Object</span>.prototype <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><p>这种情况下，Child其实就是构造函数Object的复制，Child的实例就是Object的实例<br>第二种情况，不存在任何继承</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C{</span><br><span class="line">}</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">C</span>.</span><span class="module"><span class="identifier">__proto__</span> </span><span class="operator">==</span></span>= <span class="module-access"><span class="module"><span class="identifier">Function</span>.</span></span>prototype; <span class="comment">//true</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span>prototype.__proto__<span class="operator"> === </span><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>prototype; <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><p>这种情况下，C作为一个基类(即不存在任何继承)就是一个普通函数，所以直接继承Function.prototype，但是C调用后返回一个空对象(即Object实例)，所以C.prototype.__proto__指向构造函数(Object)的prototype属性</p><h1 id="实例的-proto-属性"><a href="#实例的-proto-属性" class="headerlink" title="实例的__proto__属性"></a>实例的__proto__属性</h1><p>子类实例的__proto__属性的__proto__属性，指向父类实例的__proto__属性，也就是说，子类原型的原型，是父类的原型</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var p1 = <span class="keyword">new</span> <span class="constructor">Father(2,3)</span>;</span><br><span class="line">var p2 = nw <span class="constructor">Child(2,3,'<span class="params">neo</span>')</span>;</span><br><span class="line"></span><br><span class="line">p2.__proto__<span class="operator"> === </span>p1.__proto__ <span class="comment">//false</span></span><br><span class="line">p2.<span class="module-access"><span class="module"><span class="identifier">__proto__</span>.</span><span class="module"><span class="identifier">__proto__</span> </span><span class="operator">==</span></span>= p1.__proto__ <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><ul><li>上面代码中Child继承了Father，导致前者原型的原型是后者的原型</li><li>通过子类实例的__proto__.__proto__属性可以修改父类实例的行为<figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p2.<span class="module-access"><span class="module"><span class="identifier">__proto__</span>.</span><span class="module"><span class="identifier">__proto__</span>.</span></span>personName = <span class="keyword">function</span><span class="literal">()</span>{</span><br><span class="line">    console.log('one')</span><br><span class="line">}</span><br><span class="line">p1.person<span class="constructor">Name()</span><span class="comment">//'one'</span></span><br></pre></td></tr></tbody></table></figure></li><li>上面代码在Child的实例p2上向Father类添加方法，结果影响到了Father类的实例p1<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="ES5继承实现方式"><a href="#ES5继承实现方式" class="headerlink" title="ES5继承实现方式"></a>ES5继承实现方式</h2>es5规范中新增了Object.create()方法，该方法会传入一个对象，返回一个对象，返回的对象的原型指向传入的对象。比如执行代码var output = Object.create(input)，相当于执行代码output.<strong>proto</strong> = input,output的原型是input<br>Object.keys()方法用以获取对象自身的属性数组，我们可以用该方法简化继承父类静态属性和方法的过程<figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> extends<span class="constructor">Class(<span class="params">child</span>,Father)</span>{</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Child</span>.</span></span>prototype = <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Father</span>.</span></span>prototype);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Child</span>.</span></span>prototype.constructor = child;</span><br><span class="line"></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>keys(Father).<span class="keyword">for</span><span class="constructor">Each(<span class="params">function</span>(<span class="params">key</span>)</span>{</span><br><span class="line">        Child<span class="literal">[<span class="identifier">key</span>]</span> = Father<span class="literal">[<span class="identifier">key</span>]</span></span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="ES6继承-class继承"><a href="#ES6继承-class继承" class="headerlink" title="ES6继承(class继承)"></a>ES6继承(class继承)</h2><blockquote><p>Class可以通过extends关键字实现继承，这比ES5通过原型链实现继承要清晰和方便的多</p></blockquote><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>{</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面代码定义了一个Father类，该类通过extends关键字继承了Child类的所有属性和方法，由于内部没有添加代码，所有这两个类完全一样，等于复制了一个Child类</p><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>{</span><br><span class="line">    constructor(x,y,color){</span><br><span class="line">        <span class="keyword">super</span>(x,y);<span class="comment">//调用父类的constructor(x,y)</span></span><br><span class="line">        <span class="keyword">this</span>.color = color</span><br><span class="line">    }</span><br><span class="line">    toString(){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color + ''+<span class="keyword">super</span>.toString();<span class="comment">//调用父类的toString </span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，constructor方法和toString方法之中都出现了super’关键字，它在这里表示父级的构造函数，用来新建父级的this对象</p><blockquote><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象必须先通过父类的构造函数完成塑造，得到与父类同样的实例和方法后在对其进行加工，加上子类自己的实例属性和方法，如果不调研super方法，子类就得不到this对象</p></blockquote><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>{</span><br><span class="line">    constructor(){</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">let <span class="type">Ch</span> = <span class="keyword">new</span> <span class="type">Child</span>()<span class="comment">//ReferenceError</span></span><br><span class="line"><span class="comment">//构造函数中没有调用super方法</span></span><br></pre></td></tr></tbody></table></figure><ul><li>ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面(Parent.apply(this))。</li><li>ES6的继承机制完全不同，实质是先将父类实例对象的属性和方法加到this上面，然后再用子类的构造函数修改this</li><li>如果子类没有定义constructor方法，这个方法会被默认添加</li><li>在子类的构造函数中，只有调用super之后才可用this关键字。这是因为子类实例的构建基于父类实例，只有super方法才能调用父类实例，下列代码中子类的constructor方法没有调用super直线使用this关键字会报错，放在super方法后就是对的<figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>{</span><br><span class="line">    constructor(x,y){</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    }</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>{</span><br><span class="line">        constructor(x,y,age){</span><br><span class="line">            <span class="keyword">this</span>.age = age;<span class="comment">//ReferenceError</span></span><br><span class="line">            <span class="keyword">super</span>(x,y);</span><br><span class="line">            <span class="keyword">this</span>.age = age; <span class="comment">//true</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">let ch = <span class="keyword">new</span> <span class="type">Child</span>(<span class="number">25</span>,<span class="number">8</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">ch instanceof <span class="type">Child</span>;<span class="comment">//true</span></span><br><span class="line">ch instanceof <span class="type">Father</span>;<span class="comment">//true</span></span><br><span class="line"><span class="comment">//实例对象ch同时是Child和Father两个类的实例，与es5的行为完全一致</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>父类的静态方法也会被子类继承</p></blockquote><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>{</span><br><span class="line">    static hello(){</span><br><span class="line">        console.log(<span class="symbol">'hello</span> world')</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span></span>{</span><br><span class="line">}</span><br><span class="line"><span class="type">Child</span>.hello()<span class="comment">//hello world</span></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this/apply/call/bind</title>
      <link href="/2021/09/25/paper-this/"/>
      <url>/2021/09/25/paper-this/</url>
      
        <content type="html"><![CDATA[<h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><blockquote><p>es5中，<strong>this永远指向最后调用它的对象</strong></p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'windowsName'</span>;</span><br><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">    <span class="attr">name</span>:<span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">//windowsName</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> f = a.fn;</span><br><span class="line">f();</span><br></pre></td></tr></tbody></table></figure><p>虽然将a对象的fn方法赋值给变量f了，但是没有调用所以fn()，最后仍然是被window调用的</p><h1 id="怎么改变this指向"><a href="#怎么改变this指向" class="headerlink" title="怎么改变this指向"></a>怎么改变this指向</h1><h2 id="1-箭头函数"><a href="#1-箭头函数" class="headerlink" title="1.箭头函数"></a>1.箭头函数</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = windowsName;</span><br><span class="line"><span class="keyword">var</span> a ={</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line">    <span class="attr">func1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">func2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="comment">//匿名函数没有自己的this</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.func1()</span><br><span class="line">        },<span class="number">100</span>);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">a.func2() <span class="comment">//this.func1 is not a function</span></span><br></pre></td></tr></tbody></table></figure><p>不使用箭头函数的情况下是会报错的，因为最后调用setTimeout的对象是window，window中没有func<br>函数</p><p>使用箭头函数后</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = windowsName;</span><br><span class="line"><span class="keyword">var</span> a ={</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line">    <span class="attr">func1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">func2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>{</span><br><span class="line">            <span class="built_in">this</span>.func1()</span><br><span class="line">        },<span class="number">100</span>);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">a.func2() <span class="comment">//csl</span></span><br></pre></td></tr></tbody></table></figure><p>箭头函数的this始终指向<strong>函数定义时</strong>的this，而非执行时。    </p><blockquote><p>箭头函数中没有this绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则this绑定的是最近一层非箭头函数的this，否则this为undefined</p></blockquote><h2 id="2-在函数内部使用-this-this"><a href="#2-在函数内部使用-this-this" class="headerlink" title="2.在函数内部使用_this = this"></a>2.在函数内部使用_this = this</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = windowsName;</span><br><span class="line"><span class="keyword">var</span> a ={</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line">    <span class="attr">func1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">func2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">//匿名函数没有自己的this</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            _this.func1()</span><br><span class="line">        },<span class="number">100</span>);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">a.func2() <span class="comment">//csl</span></span><br></pre></td></tr></tbody></table></figure><p>设置var _this = this，这里的this是调用func2的对象a，防止在func2中的setTimeout被window调用，这样在func2中我们使用_this就是指向对象a了</p><h2 id="3-new实例化一个对象"><a href="#3-new实例化一个对象" class="headerlink" title="3.new实例化一个对象"></a>3.new实例化一个对象</h2><h2 id="4-使用apply，call，bind"><a href="#4-使用apply，call，bind" class="headerlink" title="4.使用apply，call，bind"></a>4.使用apply，call，bind</h2><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">func1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">func2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.func1()</span><br><span class="line">        }.apply(a),<span class="number">100</span>);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">a.func2() <span class="comment">//csl</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">func1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">func2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.func1()</span><br><span class="line">        }.call(a),<span class="number">100</span>);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">a.func2() <span class="comment">//csl</span></span><br></pre></td></tr></tbody></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">func1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">func2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.func1()</span><br><span class="line">        }.bind(a)(),<span class="number">100</span>);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">a.func2() <span class="comment">//csl</span></span><br></pre></td></tr></tbody></table></figure><h1 id="apply-call-bind区别"><a href="#apply-call-bind区别" class="headerlink" title="apply/call/bind区别"></a>apply/call/bind区别</h1><h2 id="apply定义"><a href="#apply定义" class="headerlink" title="apply定义"></a>apply定义</h2><blockquote><p>apply()方法调用一个函数，其具有一个指定的this值，以及作为一个数组或类数组提供的参数<br>语法：<code>func.apply(thisArg,[argsArray])</code></p></blockquote><ul><li>this.Arg:在func函数运行时指定的this值。<blockquote><p>需要注意的是指定的this值并不一定是该函数执行时真正的this值，如果这个函数处于非严格模式下，则指定为null或undefined时会自动之乡全局对象，同时值为原始值的this会指向该原始值的自动包装对象</p></blockquote></li><li>argsArray:一个数组或者类数组对象，其中数组元素将作为单的的参数传给func函数<blockquote><p>如果该参数的值为null或undefined，则表示不需要传入任何参数，从es5中开始可以使用类数组对象</p></blockquote></li></ul><h2 id="apply-call的区别"><a href="#apply-call的区别" class="headerlink" title="apply/call的区别"></a>apply/call的区别</h2><p>apply和call基本类似，它们的区别只是传入的参数不同</p><ul><li>call的语法为:<code>func.call(thisArg[,arg1[,arg2[,...]]])</code></li><li>call方法接受的是若干个参数列表，而apply接受的是一个包含多个参数的数组</li></ul><p>apply():</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a+b)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.apply(a,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><p>call():</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a+b)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.call(a,<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><h2 id="apply-call-bind区别-1"><a href="#apply-call-bind区别-1" class="headerlink" title="apply/call/bind区别"></a>apply/call/bind区别</h2><blockquote><p>bind方法创建一个新的函数，当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列<br>bind是创建一个新函数，我们必须手动调用</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a ={</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a+b)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.bind(a,<span class="number">1</span>,<span class="number">2</span>)() <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><h1 id="js的函数调用"><a href="#js的函数调用" class="headerlink" title="js的函数调用"></a>js的函数调用</h1><h2 id="1-作为一个函数调用"><a href="#1-作为一个函数调用" class="headerlink" title="1.作为一个函数调用"></a>1.作为一个函数调用</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'windowsName'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'csl'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">//windowsName</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'inner'</span>+<span class="built_in">this</span>);  <span class="comment">//inner:window</span></span><br><span class="line">}</span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'outer'</span>+<span class="built_in">this</span>)   <span class="comment">//outer:window</span></span><br></pre></td></tr></tbody></table></figure><p>这是一个最简单的函数，不属于任何一个对象，它在js的非严格模式属于window，严格模式就是undefined</p><h2 id="2-函数作为方法调用"><a href="#2-函数作为方法调用" class="headerlink" title="2.函数作为方法调用"></a>2.函数作为方法调用</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'windowsName'</span>;</span><br><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">//csl</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">a.fn()</span><br></pre></td></tr></tbody></table></figure><p>定义一个对象a，对象a有属性name和一个方法fn，对象a调用了fn方法，所以this指向a的</p><h2 id="3-使用构造函数调用函数"><a href="#3-使用构造函数调用函数" class="headerlink" title="3.使用构造函数调用函数"></a>3.使用构造函数调用函数</h2><blockquote><p>如果函数调用前使用了new,看起来就像是创建了新的函数，但实际上是新创建的对象，所以this会指向新创建的对象</p></blockquote><figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">(arg1,arg2)</span></span>{</span><br><span class="line">    <span class="keyword">this</span>.firstName = arg1;</span><br><span class="line">    <span class="keyword">this</span>.lastName = args2;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> myFunction(<span class="string">'cheng'</span>,<span class="string">'sl'</span>);</span><br><span class="line">a.lastName; <span class="comment">//'sl'</span></span><br></pre></td></tr></tbody></table></figure><p>扩展：<br>new的过程:</p><ul><li>创建一个空对象obj</li><li>将新建的空对象的隐式原型指向其构造函数的显示原型</li><li>使用call改变this指向</li><li>如果无返回值或返回一个非对象值，则将obj返回作为新对象；如果返回值是一个新对象的话直接返回该对象<br>伪代码表述如下：<figure class="highlight haxe"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="type">myFunction</span>(<span class="string">'cheng'</span>,<span class="string">'sl'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="type">myFunction</span>{</span><br><span class="line">    <span class="keyword">var</span> obj = {};</span><br><span class="line">    obj.__proto__ = myFunction.prototype;</span><br><span class="line">    <span class="keyword">var</span> result = myFunction.call(obj,<span class="string">'cheng'</span>,<span class="string">'sl'</span>);</span><br><span class="line">    <span class="keyword">return</span> typeof result === <span class="string">'obj'</span>?result:<span class="type">obj</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="4-作为函数方法调用函数-call-apply"><a href="#4-作为函数方法调用函数-call-apply" class="headerlink" title="4.作为函数方法调用函数(call,apply)"></a>4.作为函数方法调用函数(call,apply)</h2><blockquote><p>js中，函数是对象，对象有自己的属性和方法，则函数也有它的属性和方法，call，apply是预定义的函数方法，两个方法可用于调用函数，两个方法的第一个参数必须是对象本身</p></blockquote><ul><li>js严格模式下，调用函数时第一个参数会成为this的值，即使这个参数不是一个对象</li><li>js非严格模式下，如果第一个参数的值是null或undefined，它将使用全局对象替代<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'windowsName'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'csl'</span>;</span><br><span class="line">    innerFunction()；</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFunction</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">fn()</span><br></pre></td></tr></tbody></table></figure>这里的innerFunction()的调用属于第一种作为函数调用的方式，它没有挂载在任何对象上，所以对于没有挂载在任何对象上的函数，在非严格模式下this就是指向window的</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'windowsName'</span>;</span><br><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'csl'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">func1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="attr">func2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.func1()</span><br><span class="line">        },<span class="number">100</span>)</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">a.func2() <span class="comment">//this.func1 is not a function</span></span><br></pre></td></tr></tbody></table></figure><p>上面的例子可以简单理解为<strong>匿名函数的this永远只需window</strong>。<br>匿名函数都是自执行的，就是在匿名函数后面加()让其自执行，虽然匿名函数不能被其他对象调用，但是可以被函数调用，比如例子中的setTimeout</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量作用域、闭包、js函数执行流程</title>
      <link href="/2021/09/24/paper-closure/"/>
      <url>/2021/09/24/paper-closure/</url>
      
        <content type="html"><![CDATA[<h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><blockquote><p>当一个函数是在另一个函数中创建的时，该函数就称为嵌套的</p></blockquote><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">sayHiBye</span>(firstName,lastName){</span><br><span class="line">    <span class="keyword">function</span> <span class="title">getFullName</span>(){</span><br><span class="line">        <span class="keyword">return</span> <span class="type">firstName</span> + '' + lastName;</span><br><span class="line">    }</span><br><span class="line">    alert(<span class="symbol">'Hello</span>,' + getFullName());</span><br><span class="line">    alert(<span class="symbol">'Bye</span>' + getFullName())</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里创建的嵌套函数getFullName()是为了更加方便访问到外部变量，因此可以返回全名，<br>也可以作为一个新对象的属性或结果返回一个嵌套函数（如下代码），之后可以在其他地方调用，不论在哪调用，它仍然可以访问相同的外部变量</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> count++;</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> counter = makeCounter();</span><br><span class="line">alert(counter());<span class="comment">//0</span></span><br><span class="line">alert(counter());<span class="comment">//1 可以累加</span></span><br></pre></td></tr></tbody></table></figure><h2 id="词法环境-Lexical-Environment"><a href="#词法环境-Lexical-Environment" class="headerlink" title="词法环境(Lexical Environment)"></a>词法环境(Lexical Environment)</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><blockquote><p>js中，每个运行的函数，代码块以及整个脚本都有一个被称为词法环境的内部关联对象  </p></blockquote><p>词法环境对象由两部分组成    </p><ul><li>环境记录(Environment Record) 一个存储所有局部变量作为其属性(例如this的值)的对象</li><li>对外部词法环境的引用，与外部代码相关联    </li></ul><blockquote><p>一个变量只是环境记录这个特殊对象的一个属性，获取或修改变量相当于获取或修改词法环境的一个属性</p></blockquote><p>下面的图片中，矩形表示环境记录(变量存储)箭头表示外部引用，全局词法环境没有外部引用，所以箭头指向了null<br><img src="1.jpg" alt="alt"></p><p>下图演示了执行过程中<strong>全局词法环境</strong>的变化</p><ul><li>最初它们处于未初始化(Uninitalized)状态，在let声明前，不能引用它</li><li>let声明，但没赋值</li><li>phrase被赋值</li><li>phrase的值被修改<br><img src="2.jpg" alt="alt"></li></ul><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><blockquote><p>一个函数也是一个值，与变量不同的是<strong>函数声明的初始化会被立即完成</strong></p></blockquote><p>当创建了一个词法环境时，函数立即变得可用，这就是我们为什么可以在函数声明的定义之前调用函数声明</p><p>下图是添加一个函数时全局词法状态的初始状态<br><img src="3.jpg" alt="alt"></p><h3 id="内部和外部的词法环境"><a href="#内部和外部的词法环境" class="headerlink" title="内部和外部的词法环境"></a>内部和外部的词法环境</h3><blockquote><p>当函数被调用时，会自动创建一个新的词法环境来存储这个调用的局部变量和参数</p></blockquote><p>如下图，我们有两个词法环境：内部(函数)和外部(全局)，当调用say函数时，它会<strong>先搜索内部词法环境，然后搜索外部环境，然后搜索更外部的环境，直到全局词法环境</strong><br><img src="4.jpg" alt="alt"></p><p>搜索过程如下：</p><ul><li>对于name变量，当say中的alert试图访问name时，会立即在内部词法环境中找到它</li><li>当它试图访问phrase时，内部无phrase，使用它顺着<strong>对外部词法环境的引用</strong>找到了它<br><img src="5.jpg" alt="alt"></li></ul><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><blockquote><p>闭包是指内部函数总是可以访问其所在的外部函数中的变量和参数，除了构造函数，其他的js函数都是天生闭包的，也就是说js函数会通过隐藏的[[Evironmrnt]]属性记住它们创建的位置，所以它们可以访问外部变量<br>返回文初的<code>makeCounter</code>这个例子</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> count++</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> counter = makeCounter()</span><br></pre></td></tr></tbody></table></figure><p>在每次调用makeCount之前都会创建一个新的词法环境对象，以存储该makeCounter运行时的变量<br>因此，我们有两层的词法环境，还有一个未被使用的嵌套函数return count++，它依旧有一个名为[[Environment]]的隐藏属性，该属性保存了对创建该函数的词法环境的引用，因此，counter.[[Environment]]有对{content:0}词法环境的引用<br>当调用counter()时，会为该引用创建一个新的词法环境<br><img src="6.jpg" alt="alt"><br>当counter()中的代码查找count变量时，它会先搜索自己的词法环境(空),然后是外部makeCounter()的词法环境在哪里找到就在哪里修改(下图中是在count那里修改的变量)<br>如果我们调用多次counter()，count变量将会增加到2，3<br><img src="7.jpg" alt="alt"></p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><ul><li>函数<strong>调用完之后</strong>会将词法环境中的所有变量从内存中删除</li><li>如果有一个乔涛的函数在函数结束后仍可达，则它具有引用词法环境的[[Environment]]属性，例子如下<figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span></span>{</span><br><span class="line">    let value = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        alert(++value);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">let g = f();//g.<span class="string">[[Environment]]</span> 存储了对相应 f() 调用的词法环境的引用</span><br><span class="line">g();</span><br><span class="line">g();</span><br><span class="line">g(); //多次调用并且返回的函数被保存，所以相应的词法环境也会保留在内存中</span><br></pre></td></tr></tbody></table></figure>当词法环境对象变得不可达时，他就会死去，它仅在至少有一个乔涛韩束引用它时才会存在</li></ul><h2 id="一些闭包的例子"><a href="#一些闭包的例子" class="headerlink" title="一些闭包的例子"></a>一些闭包的例子</h2><h3 id="函数会选择最新的内容吗"><a href="#函数会选择最新的内容吗" class="headerlink" title="函数会选择最新的内容吗"></a>函数会选择最新的内容吗</h3><figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span><span class="built_in"> name</span> = <span class="string">'John'</span>;</span><br><span class="line"><span class="keyword">function</span> sayHi(){</span><br><span class="line">    alert(<span class="string">'Hi'</span> +<span class="built_in"> name</span>);</span><br><span class="line">}<span class="built_in"></span></span><br><span class="line"><span class="built_in">name</span> = <span class="string">'Pete'</span>;</span><br><span class="line">sayHi();</span><br></pre></td></tr></tbody></table></figure><ul><li>函数将从内向外依次寻找目标变量，变量在全局中</li><li>name = ‘Pete’相当于给name重新赋值，这个函数使用最新的值</li></ul><h3 id="哪些变量可用"><a href="#哪些变量可用" class="headerlink" title="哪些变量可用"></a>哪些变量可用</h3><p><code>makeWorker</code>函数是否可以从它被创建的位置或者调用位置访问外部变量</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeWorker</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'Pete'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        alert(name);</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'John'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> work = makeWorker();</span><br><span class="line">work()<span class="comment">//pete</span></span><br></pre></td></tr></tbody></table></figure><h3 id="反复调用counter实例的方法时"><a href="#反复调用counter实例的方法时" class="headerlink" title="反复调用counter实例的方法时"></a>反复调用counter实例的方法时</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.up = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> ++count</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">this</span>.down = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> --count;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">new</span> Counter();</span><br><span class="line"><span class="built_in">console</span>.log(counter.up());</span><br><span class="line"><span class="built_in">console</span>.log(counter.down());</span><br><span class="line"><span class="built_in">console</span>.log(counter.up());</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>这两个嵌套函数都是在同一个词法环境中创建的，使用它们可以共享对同一个count变量的访问，</li><li>使用前置自增++x，操作数x 将在自增后返回，所以第一个是1第二个是2，第三个是1</li></ul><h3 id="if内的函数"><a href="#if内的函数" class="headerlink" title="if内的函数"></a>if内的函数</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> phrase = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">if</span>(ture){</span><br><span class="line">    <span class="keyword">let</span> user = <span class="string">'John'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>{</span><br><span class="line">        alert(<span class="string">`<span class="subst">${phrase}</span>,<span class="subst">${user}</span>`</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">sayHi();</span><br></pre></td></tr></tbody></table></figure><ul><li>sayHi是在if内声明的，所以它只存在于if中外部是没有sayHi的</li></ul><h3 id="不可见变量"><a href="#不可见变量" class="headerlink" title="不可见变量"></a>不可见变量</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">function <span class="function"><span class="keyword">func</span>()</span>{</span><br><span class="line">    console.log(x);</span><br><span class="line">    <span class="keyword">let</span> x <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span>()</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>let只在块级作用域下起作用，获取不到全局的x</li><li>并且有暂时性死区，无法变量提升，所以在函数执行时无法获取到下面的x值</li></ul><h1 id="JS函数的执行顺序与闭包"><a href="#JS函数的执行顺序与闭包" class="headerlink" title="JS函数的执行顺序与闭包"></a>JS函数的执行顺序与闭包</h1><blockquote><p>总所周知，JS在栈内存(浏览器一加载就形成了栈内存)中执行函数，函数执行时会形成一个执行上下文（执行栈）并且把执行上下文压缩到栈内存里执行。</p></blockquote><figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = (<span class="function"><span class="keyword">function</span><span class="params">(i)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        alert( i*<span class="number">2</span> )</span><br><span class="line">    }</span><br><span class="line">})(<span class="number">2</span>);</span><br><span class="line">test(<span class="number">5</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>上述代码的执行流程为：</strong></p><ul><li>先把IIFE<strong>执行后的值</strong>赋值给test，那么它的词法环境中含有：形参i=2，return的function的堆内存地址（因为它指向了一个堆内存地址，这个堆内存在执行，所以它被引用而且不会被回收，形成了闭包）</li><li>假设它执行后return的内存地址为AAAFFF111，这个AAAFFF111指向的堆内存中又含有: 作为函数存储的代码字符串<code>'alert(i*2)'</code>以及作为对象存储的prototype，length形参个数(所以说函数也是对象)，又因为它被保留了引用，所以它不会被回收</li><li>最后执行test(5)，在它的词法环境中没有形参i的值，所以它会去它的上层 作用域中寻找i，找到了上述第一个执行的test的词法作用域并且销毁自身，因为上层作用域不会被销毁，所以输出的值为alert(4)即’4’<blockquote><p>总结：所有的引用类型都是一个堆，我们所有的操作都是对堆的内存地址的操作</p></blockquote></li></ul><p><img src="function-closure1.jpg" alt="alt"></p><p>下例涉及到的闭包知识并不多</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">Foo()</span>{</span><br><span class="line">    getName = <span class="keyword">function</span><span class="literal">()</span>{</span><br><span class="line">        console.log(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    return this</span><br><span class="line">}</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span>getName = <span class="keyword">function</span><span class="literal">()</span> {</span><br><span class="line">    console.log(<span class="number">2</span>)</span><br><span class="line">}</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span>prototype.getName = <span class="keyword">function</span><span class="literal">()</span>{</span><br><span class="line">    console.log(<span class="number">3</span>)</span><br><span class="line">}</span><br><span class="line">var getName = <span class="keyword">function</span><span class="literal">()</span> {</span><br><span class="line">    console.log(<span class="number">4</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">function</span> get<span class="constructor">Name()</span>{</span><br><span class="line">    console.log(<span class="number">5</span>)</span><br><span class="line">}</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span>get<span class="constructor">Name()</span>;</span><br><span class="line">get<span class="constructor">Name()</span>;</span><br><span class="line"><span class="constructor">Foo()</span>.get<span class="constructor">Name()</span>;</span><br><span class="line">get<span class="constructor">Name()</span></span><br><span class="line"><span class="keyword">new</span> <span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span>get<span class="constructor">Name()</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="constructor">Foo()</span>.get<span class="constructor">Name()</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> <span class="constructor">Foo()</span>.get<span class="constructor">Name()</span>;</span><br></pre></td></tr></tbody></table></figure><p>分析得</p><ul><li>有var说明是es5的语法应该先考虑变量提升，然后才是代码执行</li><li><code>getName()</code>函数先提升被执行,之后被var getName这个在函数执行阶段执行的函数覆盖</li><li><code>Foo().getName()</code>:Foo()返回的结果再调用getName</li><li><code>new Foo.getName()</code>与<code>new Foo().getName()</code>的区别在于调用的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" title="default 优先级" target="">优先级</a>不同：圆括号&gt;成员访问(点)=new,当优先级相同时，执行顺序从左往右<br><img src="function-closure2.jpg" alt="alt"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2021/09/20/paper-4/"/>
      <url>/2021/09/20/paper-4/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul><li>一种遵从先进后出（LIFO）原则的有序集合；新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端为栈底。在栈里，新元素都靠近栈顶，旧元素都靠近栈底</li><li>一摞叠起来的数或盘子都可以看做一个栈，我们想要拿出最底下的书或盘子，一定要先将上面的书移走才可以</li><li>栈也被用在编程语言的编译器和内存中保存变量，方法调用<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//在js中使用类来实现一个栈</span><br><span class="line">class Stack {</span><br><span class="line"></span><br><span class="line">constructor() {</span><br><span class="line">this.items = []</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 入栈</span><br><span class="line">push(element) {</span><br><span class="line">this.items.push(element)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 出栈</span><br><span class="line">pop() {</span><br><span class="line">return this.items.pop()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 末位</span><br><span class="line">get peek() {</span><br><span class="line">return this.items[this.items.length - 1]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 是否为空栈</span><br><span class="line">get isEmpty() {</span><br><span class="line">return !this.items.length</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 尺寸</span><br><span class="line">get size() {</span><br><span class="line">return this.items.length</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 清空栈</span><br><span class="line">clear() {</span><br><span class="line">this.items = []</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 打印栈数据</span><br><span class="line">print() {</span><br><span class="line">console.log(this.items.toString())</span><br><span class="line">}</span><br><span class="line">        }</span><br><span class="line">// 实例化一个栈</span><br><span class="line">const stack = new Stack()</span><br><span class="line">console.log(stack.isEmpty) // true</span><br><span class="line"></span><br><span class="line">// 添加元素</span><br><span class="line">stack.push(5)</span><br><span class="line">stack.push(8)</span><br><span class="line"></span><br><span class="line">// 读取属性再添加</span><br><span class="line">console.log(stack.peek) // 8</span><br><span class="line">stack.push(11)</span><br><span class="line">console.log(stack.size) // 3</span><br><span class="line">console.log(stack.isEmpty) // false</span><br></pre></td></tr></tbody></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2></li><li>与栈相反，队列是一种遵循先进先出(FIFO)原则的一组有序的项，队列在尾部添加新元素，并从头移除元素。最新添加的元素必须排在队列的末尾</li><li>在现实中，最常见的例子就是排队，前面的人优先完成自己的事务，完成之后，下一个人才能继续<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class Queue {</span><br><span class="line"></span><br><span class="line">constructor(items) {</span><br><span class="line">this.items = items || []</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">enqueue(element){</span><br><span class="line">this.items.push(element)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dequeue(){</span><br><span class="line">return this.items.shift()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">front(){</span><br><span class="line">return this.items[0]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">clear(){</span><br><span class="line">this.items = []</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">get size(){</span><br><span class="line">return this.items.length</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">get isEmpty(){</span><br><span class="line">return !this.items.length</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">print() {</span><br><span class="line">console.log(this.items.toString())</span><br><span class="line">}</span><br><span class="line">        }</span><br><span class="line">const queue = new Queue()</span><br><span class="line">console.log(queue.isEmpty) // true</span><br><span class="line"></span><br><span class="line">queue.enqueue('John')</span><br><span class="line">queue.enqueue('Jack')</span><br><span class="line">queue.enqueue('Camila')</span><br><span class="line">console.log(queue.size) // 3</span><br><span class="line">console.log(queue.isEmpty) // false</span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.print() // 'Camila'</span><br></pre></td></tr></tbody></table></figure><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3></li><li>优先队列是默认队列的修改版。现实生活中的例子就是机场登机的顺序，头等舱和商务舱乘客的优先级要高于经济舱乘客</li><li>优先队列元素的添加和移除是基于优先级的</li><li>实现一个优先队列，有两种选项：设置优先级，然后在正确的位置添加元素；或者用入列操作添加元素，按照优先级移除它们<h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3></li><li>为充分利用向量空间，客服假溢出现象的方法是：将向量想象为一个首尾相接的圆环，并称这种向量为循环向量。存储在其中的队列称为循环队列。这种循环队列可以以单链表，队列的方式来实际编程应用中来实现<h3 id=""><a href="#" class="headerlink" title=""></a></h3></li></ul><h2 id="JS的数据类型和数据结构"><a href="#JS的数据类型和数据结构" class="headerlink" title="JS的数据类型和数据结构"></a>JS的数据类型和数据结构</h2><h3 id="基本类型（栈stack）"><a href="#基本类型（栈stack）" class="headerlink" title="基本类型（栈stack）"></a>基本类型（栈stack）</h3><pre><code>Number，String，Boolean，Null，Undefind，null（不可用typeof检测），Symbol（ES6中新增）：代表创建后独一无二且不可变的数据类型，它的出现我认为是为了解决可能出现的全局变量冲突的问题</code></pre><h3 id="引用数据类型（堆head）"><a href="#引用数据类型（堆head）" class="headerlink" title="引用数据类型（堆head）"></a>引用数据类型（堆head）</h3><pre><code>Object（包括Array，Function，Data）   </code></pre><h3 id="每个数据都需要一个内存空间"><a href="#每个数据都需要一个内存空间" class="headerlink" title="每个数据都需要一个内存空间"></a>每个数据都需要一个内存空间</h3><table><thead><tr><th>栈</th><th>堆</th></tr></thead><tbody><tr><td>可直接操作保存在栈内存空间的值</td><td>不允许直接访问，不能直接操作</td></tr><tr><td>变量名，值       —&gt;引用</td><td>值</td></tr><tr><td>c，0X0012</td><td>[1,2,3]</td></tr></tbody></table><h2 id="基本数据类型和引用数据类型的区别"><a href="#基本数据类型和引用数据类型的区别" class="headerlink" title="基本数据类型和引用数据类型的区别"></a>基本数据类型和引用数据类型的区别</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li>基本数据类型的值是不可变的</li><li>基本数据类型不可以添加属性和方法，虽然不会报错，但也只是一瞬间转为了相应包装对象，操作完又转化回基本数据类型，不会保存结果</li><li>基本数据类型的赋值是简单赋值，基本数据类型的比较是值的比较</li><li>基本数据类型是存放在栈区的<h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3></li><li>引用类型的值是可以改变的，例如对象就可以通过修改对象属性更改对象</li><li>引用类型可以添加属性方法</li><li>引用类型的赋值是对象引用，声明的变量标识符，存储的只是对象的指针地址</li><li>引用类型的比较是引用（指针地址）的比较</li><li>引用类型是同时保存在栈区和堆区中的，栈区保存变量标识符和指向堆内存的地址</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jump项目</title>
      <link href="/2021/09/12/post-name/"/>
      <url>/2021/09/12/post-name/</url>
      
        <content type="html"><![CDATA[<h1 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h1><p><code>Object.create(proto,[descriptors])</code></p><ul><li>完全可以取代__proto__</li><li><code>Object.getPrototypeOf(obj)</code> – 返回对象obj的[[Prototype]]</li><li><code>Object.setPrototypeOf(obj,proto)</code> – 将对象的[[prototype]]设置为proto</li></ul><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = {</span><br><span class="line">    eats:<span class="literal">true</span></span><br><span class="line">};</span><br><span class="line"><span class="comment">//常见一个以animal为原型的新对象</span></span><br><span class="line"><span class="keyword">let</span> rabit = <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>create(animal);</span><br><span class="line">alert(rabibit.eats);</span><br><span class="line">alert(<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">PrototypeOf(<span class="params">rabbit</span>)</span><span class="operator"> === </span>animal) <span class="comment">//true</span></span><br><span class="line"><span class="comment">//将rabbit的原型修改为{}</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>set<span class="constructor">PrototypeOf(<span class="params">rabbit</span>,{})</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Object.create有一个可选的第二参数：属性描述器，我们可以在此处为新对象提供额外的属性<figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">animal</span> = {</span><br><span class="line">    eats:<span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> <span class="attr">rabbot</span> = Object.create(animal,{</span><br><span class="line">    jumps:{</span><br><span class="line">        value:<span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">alert(rabbit.jumps); //<span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></li><li>使用Object.create来实现克隆一个对象的所有描述符<br><code>let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo报错总结</title>
      <link href="/2021/09/12/paper-3/"/>
      <url>/2021/09/12/paper-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从零开始搭建hexo到安装theme主题这段比较顺利，到安装主题之后开始出现错误</p></blockquote><h2 id="1-Error-no-such-file-or-directory-scandir-‘…-’"><a href="#1-Error-no-such-file-or-directory-scandir-‘…-’" class="headerlink" title="1. Error:no such file or directory,scandir ‘….’"></a>1. Error:no such file or directory,scandir ‘….’</h2><p>加入主题之后运行所有hexo命令都会报如下错误<br><img src="image2.png" alt="alt"><br>排查之后，blog主题这一栏填成了别人主题的theme地址，直接写上theme主题名字就行了<br><img src="img3.png" alt="alt"><br>接着除了hexo-d其他命令都能运行</p><h2 id="2-spawn-failed"><a href="#2-spawn-failed" class="headerlink" title="2.spawn failed"></a>2.spawn failed</h2><p>用hexo-d更新的时候报错 <code>spawn failed</code><br>检查了自己的github ssh地址 显示：but Github does not provide shell access<br>更改myblog目录下的config.yml的repo<br><img src="img4.png" alt="图片无法加载sorry"></p><h2 id="3-not-a-git-repository-or-any-of-the-parent-directories-git"><a href="#3-not-a-git-repository-or-any-of-the-parent-directories-git" class="headerlink" title="3.not a git repository (or any of the parent directories): .git"></a>3.not a git repository (or any of the parent directories): .git</h2><blockquote><p>暂时不太清楚这个的报错原因，可能是当时服务器的问题，第二天登了之后就好了</p></blockquote><p><img src="img7.png" alt="图片alt"></p><h2 id="4-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-…"><a href="#4-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-…" class="headerlink" title="4.can not read a block mapping entry ;a multiline key may not be an implicit key ….."></a>4.can not read a block mapping entry ;a multiline key may not be an implicit key …..</h2><p>上传paper.md的时候报错<br><img src="img10.png" alt="图片alt"><br>因为paper.md标题中的语法不是很规范，冒号后面没有加空格，及config.yml中的语法也该如此<br>正确书写应该是tags： js<br><img src="img11.png" alt="图片alt"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setTimeout与setInterval</title>
      <link href="/2021/08/29/paper-1/"/>
      <url>/2021/08/29/paper-1/</url>
      
        <content type="html"><![CDATA[<h1 id="setTimeout与setInterval"><a href="#setTimeout与setInterval" class="headerlink" title="setTimeout与setInterval"></a>setTimeout与setInterval</h1><blockquote><p>有时我们并不想立即执行一个函数而是等待特定一段时间后再执行。这就是所谓的’计划调用(scheduling a call)’<br>目前有两种方法可以实现：</p></blockquote><ul><li>setTimeout：允许我们将函数推迟到一段时间间隔之后再执行</li><li>setInterval：允许我们重复运行一个函数，从一段时间间隔之后开始运行，之后以该时间间隔连续重复运行该函数</li></ul><h1 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h1><p>语法：<code>let timerId= setTimeout(func|code,[delay],[arg1],[arg2],...)</code></p><ul><li><code>func|code</code>:想要执行的函数或代码字符串，一般传入的都是函数</li><li><code>delay</code>:执行前的延时，毫秒为单位1ms = 1s；</li><li><code>arg1,arg2...</code>:要传入被执行函数的参数列表<br>例如下面这个示例中sayHi()方法会在1s后执行：<figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> say<span class="constructor">Hi(<span class="params">phrase</span>,<span class="params">who</span>)</span>{</span><br><span class="line">    alert(phrase + <span class="character">','</span> + who);</span><br><span class="line">}</span><br><span class="line">set<span class="constructor">Timeout(<span class="params">sayHi</span>,1000,'<span class="params">hello</span>','<span class="params">neo</span>')</span>;<span class="comment">//hello,neo</span></span><br></pre></td></tr></tbody></table></figure>如果第一个参数传入的是字符串，js会自动为其创建一函数<figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="string">'alert('</span>hello<span class="string">')'</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="regexp">//</span>建议使用箭头函数代替它们</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span> alert(<span class="string">'hello'</span>),<span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure></li><li>setTimeout传入的函数参数一般不需要加上括号<code>setTimeout(sayHi(),1000)//false</code>;</li><li>setTimeout期望得到一个对函数的<strong>引用</strong>，加上括号明显是在执行函数，实际上传入setTimeout的是函数的执行结果</li></ul><h2 id="clearTimeout取消调度"><a href="#clearTimeout取消调度" class="headerlink" title="clearTimeout取消调度"></a>clearTimeout取消调度</h2><p>语法：<code>let timerId = setTimeout(...); clearTimeout(timerId)</code></p><h1 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h1><ul><li>语法和setTimeout相同:<code>let timerId = setInterval(func|code, [delay], [arg1], [arg2], ...)</code></li><li>参数的意义也相同，不过与setTimeout只执行一次不同，setInterval是每间隔给定的时间周期性执行。</li><li>想要阻止后续调用，我们需要调用<code>clearInerval(timerId)</code></li></ul><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>每<span class="number">2</span>s重复一次</span><br><span class="line">let timerId = <span class="built_in">setInterval</span>(<span class="function"><span class="params">()</span> =&gt;</span> alert(<span class="string">'t'</span>),<span class="number">2000</span>);</span><br><span class="line">//<span class="number">5</span>s后停止</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span> {<span class="built_in">clearInterval</span>(timerId);alert(<span class="string">'stop'</span>);},<span class="number">5000</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>在大多数浏览器中，在显示<code>alert/confirm/prompt</code>弹窗时，内部的定时器仍然会继续进行</li><li>如果在一定时间内没有关掉alert弹窗下一个alert会立即显示且两次alert的时间间隔小于2s</li></ul><h1 id="嵌套的setTimeout"><a href="#嵌套的setTimeout" class="headerlink" title="嵌套的setTimeout"></a>嵌套的setTimeout</h1><p>setInterval</p><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let timerId = <span class="built_in">setInterval</span>(<span class="function"><span class="params">()</span> =&gt;</span> alert(<span class="string">'tick'</span>),<span class="number">2000</span>);</span><br></pre></td></tr></tbody></table></figure><p>相当于setTimeout在当前这一次函数执行完时立即调度下一次调用</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>)</span>{</span><br><span class="line">    alert(<span class="string">'tick'</span>);</span><br><span class="line">    timerId = <span class="built_in">setTimeout</span>(tick,<span class="number">2000</span>);</span><br><span class="line">},<span class="number">2000</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>嵌套的setTimeout比setInterval灵活得多，采用这种方式可以根据当前执行结果来调度下一次调用</li><li>例如我们要实现一个每间隔5s向服务器发送一个数据请求服务器过载，要降低请求频率将间隔增加到10、20s等<figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dekay = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">let</span> timerId = set<span class="constructor">Timeout(<span class="params">function</span> <span class="params">request</span>()</span>{</span><br><span class="line">    <span class="keyword">if</span>(request failed due <span class="keyword">to</span> server overload){</span><br><span class="line">        delay *= <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    timerId = set<span class="constructor">Timeout(<span class="params">request</span>,<span class="params">delay</span>)</span>;</span><br><span class="line">},delay);</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>嵌套的setTimeout能够精准地设置两次执行之间的间隔时间而setInterval却不能</strong></p><ul><li><p>setInterval</p><blockquote><p>使用setInterval时，func函数实际调用间隔要比代码中设定的时间间隔要短(&lt;100ms)</p></blockquote>  <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>{</span><br><span class="line">    func()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>setTimeout</p><blockquote><p>嵌套的setTimeout就能保证延时的固定(100ms)</p></blockquote>  <figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">set<span class="constructor">Timout(<span class="params">function</span> <span class="params">run</span>()</span>{</span><br><span class="line">    func(i++);</span><br><span class="line">    set<span class="constructor">Timeout(<span class="params">run</span>,100)</span>;</span><br><span class="line">},<span class="number">100</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="垃圾回收和setInterval-setTimeout回调"><a href="#垃圾回收和setInterval-setTimeout回调" class="headerlink" title="垃圾回收和setInterval/setTimeout回调"></a>垃圾回收和setInterval/setTimeout回调</h2></li><li><p>当一个函数中传入setInterval/setTimeout时，将为其创建一个内部引用，并保存在内存中，<strong>即使这个函数没有被引用，也会保存在内存中不会被销毁</strong></p></li><li><p>对于setInterval传入的函数也是一直存在于内存中直到被clearInternal被调用<br>缺点：</p></li><li><p>如果函数引用了外部变量（译注：闭包），那么只要这个函数还存在，外部变量也会随之存在。它们可能比函数本身占用更多的内存。因此，当我们不再需要调度函数时，最好取消它，即使这是个（占用内存）很小的函数。</p></li></ul><h1 id="setTimeout-func-0"><a href="#setTimeout-func-0" class="headerlink" title="setTimeout(func, 0)"></a>setTimeout(func, 0)</h1><ul><li>这样调用可以让func尽快执行，但是只有在当前执行的脚本执行完成后，调度程序才会调用它</li><li>该函数被当前脚本执行完之后立即执行,比如下面代码会先输出hello再输出world<figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span>alert(<span class="string">'world'</span>));</span><br><span class="line">alert(<span class="string">'hello'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="零延时实际上不为0"><a href="#零延时实际上不为0" class="headerlink" title="零延时实际上不为0"></a>零延时实际上不为0</h2><blockquote><p>在<strong>浏览器环境</strong>下，嵌套定时器的运行频率是受限制的。根据html5标准所讲：经过5重嵌套定时器之后，事件间隔被强制设置为至少4ms</p></blockquote></li></ul><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> start = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>now<span class="literal">()</span>;</span><br><span class="line"><span class="keyword">let</span> times = <span class="literal">[]</span>;</span><br><span class="line"></span><br><span class="line">set<span class="constructor">Timeout(<span class="params">function</span> <span class="params">run</span>()</span>{</span><br><span class="line">    times.push(<span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>now<span class="literal">()</span> - start);<span class="comment">//保存前一个调用的延时</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(start + <span class="number">100</span> &lt; <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>now<span class="literal">()</span>) alert(times);<span class="comment">//100ms后显示延时信息</span></span><br><span class="line">    <span class="keyword">else</span> set<span class="constructor">Timeout(<span class="params">run</span>)</span>;<span class="comment">//否则重新调度</span></span><br><span class="line">    <span class="comment">// 1,1,1,1,9,15,20,24,30,35,40,45,50,55,59,64,70,75,80,85,90,95,100</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>第一次定时器是立即执行的，接下来就可以看待9,15,20,24两次调用间隔为4ms</li><li>如果我们使用setInterval也会发生类似的情况</li><li>对于服务器端的js就没有这个限制</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo用法</title>
      <link href="/2021/08/29/paper/"/>
      <url>/2021/08/29/paper/</url>
      
        <content type="html"><![CDATA[<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><blockquote><p>Hexo 有多种图片插入方式，可以将图片存放在本地引用或者将图片放在 CDN 上引用，插入图片的常用方式，你也可以理解为在 Markdown 中插入图片。</p></blockquote><h2 id="本地绝对路径"><a href="#本地绝对路径" class="headerlink" title="本地绝对路径"></a>本地绝对路径</h2><p>当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source/images 文件夹中，通过 Markdown 语法访问它们。<br><code>![alt](/images/test.jpg)</code></p><h2 id="本地相对路径-本博使用"><a href="#本地相对路径-本博使用" class="headerlink" title="本地相对路径 (本博使用)"></a>本地相对路径 (本博使用)</h2><p>图片除了可以放在统一的 images 文件夹中，还可以放在文章自己的目录中，文章的目录可以通过配置 _config.yml 来生成。配置如下：</p><p><code>post_asset_folder: true</code></p><p>将 _config.yml 文件中的配置项 post_asset_folder 设为 true 后，执行命令 $ hexo new post_name，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name 。将图片资源放在 post_name 中，文章就可以使用相对路径引用图片资源了。</p><p><code>![alt](test.jpg)</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/29/hello-world/"/>
      <url>/2021/08/29/hello-world/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
